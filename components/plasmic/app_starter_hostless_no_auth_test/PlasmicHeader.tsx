// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: waVhN6sKC41JduCkjZHFuq
// Component: DuG9qq6i0-cV

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Section2 from "../../Section2"; // plasmic-import: PEC5-llnbLr9/component
import TextInput from "../../TextInput"; // plasmic-import: JcoJaQnJKJTs/component
import Button from "../../Button"; // plasmic-import: XVnqJFFWe0Ng/component

import { useScreenVariants as useScreenVariantsogPeTNssmuP2 } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: OGPeTNssmuP2/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_app_starter_hostless_no_auth_test.module.css"; // plasmic-import: waVhN6sKC41JduCkjZHFuq/projectcss
import sty from "./PlasmicHeader.module.css"; // plasmic-import: DuG9qq6i0-cV/css

import SearchsvgIcon from "./icons/PlasmicIcon__Searchsvg"; // plasmic-import: 73TpZHBbWv9h/icon
import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: oo3GFQUuqF3Z/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: dxj71VlIakcj/icon

createPlasmicElementProxy;

export type PlasmicHeader__VariantMembers = {
  variations: "_1" | "_2" | "unnamedVariant";
  background: "image" | "unnamedVariant";
  border: "loose" | "tight";
  horizontalDirection: "horizontalDirection";
  justification: "center" | "justified" | "left" | "right";
  colors: "tero" | "leo" | "nook";
  tagColors: "tero" | "leo" | "nook";
};
export type PlasmicHeader__VariantsArgs = {
  variations?: MultiChoiceArg<"_1" | "_2" | "unnamedVariant">;
  background?: SingleChoiceArg<"image" | "unnamedVariant">;
  border?: MultiChoiceArg<"loose" | "tight">;
  horizontalDirection?: SingleBooleanChoiceArg<"horizontalDirection">;
  justification?: MultiChoiceArg<"center" | "justified" | "left" | "right">;
  colors?: SingleChoiceArg<"tero" | "leo" | "nook">;
  tagColors?: SingleChoiceArg<"tero" | "leo" | "nook">;
};
type VariantPropType = keyof PlasmicHeader__VariantsArgs;
export const PlasmicHeader__VariantProps = new Array<VariantPropType>(
  "variations",
  "background",
  "border",
  "horizontalDirection",
  "justification",
  "colors",
  "tagColors"
);

export type PlasmicHeader__ArgsType = {
  children?: React.ReactNode;
};
type ArgPropType = keyof PlasmicHeader__ArgsType;
export const PlasmicHeader__ArgProps = new Array<ArgPropType>("children");

export type PlasmicHeader__OverridesType = {
  root?: p.Flex<typeof Section2>;
  headerGroup?: p.Flex<"div">;
  column?: p.Flex<"div">;
  preHeading?: p.Flex<"h6">;
  heading2?: p.Flex<"h1">;
  content?: p.Flex<"div">;
  textInput?: p.Flex<typeof TextInput>;
  buttonGroup?: p.Flex<"div">;
  primaryButton?: p.Flex<typeof Button>;
  secondaryButton?: p.Flex<typeof Button>;
  text?: p.Flex<"div">;
};

export interface DefaultHeaderProps {
  children?: React.ReactNode;
  variations?: MultiChoiceArg<"_1" | "_2" | "unnamedVariant">;
  background?: SingleChoiceArg<"image" | "unnamedVariant">;
  border?: MultiChoiceArg<"loose" | "tight">;
  horizontalDirection?: SingleBooleanChoiceArg<"horizontalDirection">;
  justification?: MultiChoiceArg<"center" | "justified" | "left" | "right">;
  colors?: SingleChoiceArg<"tero" | "leo" | "nook">;
  tagColors?: SingleChoiceArg<"tero" | "leo" | "nook">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHeader__RenderFunc(props: {
  variants: PlasmicHeader__VariantsArgs;
  args: PlasmicHeader__ArgsType;
  overrides: PlasmicHeader__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof p.useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "textInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "variations",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.variations
      },
      {
        path: "background",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.background
      },
      {
        path: "border",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.border
      },
      {
        path: "horizontalDirection",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          $props.horizontalDirection
      },
      {
        path: "justification",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.justification
      },
      {
        path: "colors",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.colors
      },
      {
        path: "tagColors",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.tagColors
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = p.useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsogPeTNssmuP2()
  });

  return (
    <Section2
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames("__wab_instance", sty.root, {
        [sty.rootbackground_image]: hasVariant($state, "background", "image"),
        [sty.rootbackground_unnamedVariant]: hasVariant(
          $state,
          "background",
          "unnamedVariant"
        ),
        [sty.rootborder_loose]: hasVariant($state, "border", "loose"),
        [sty.rootborder_tight]: hasVariant($state, "border", "tight"),
        [sty.rootcolors_leo]: hasVariant($state, "colors", "leo"),
        [sty.rootcolors_nook]: hasVariant($state, "colors", "nook"),
        [sty.rootcolors_tero]: hasVariant($state, "colors", "tero"),
        [sty.roothorizontalDirection]: hasVariant(
          $state,
          "horizontalDirection",
          "horizontalDirection"
        ),
        [sty.rootjustification_center]: hasVariant(
          $state,
          "justification",
          "center"
        ),
        [sty.rootjustification_justified]: hasVariant(
          $state,
          "justification",
          "justified"
        ),
        [sty.rootjustification_left]: hasVariant(
          $state,
          "justification",
          "left"
        ),
        [sty.rootjustification_right]: hasVariant(
          $state,
          "justification",
          "right"
        ),
        [sty.roottagColors_leo]: hasVariant($state, "tagColors", "leo"),
        [sty.roottagColors_nook]: hasVariant($state, "tagColors", "nook"),
        [sty.roottagColors_tero]: hasVariant($state, "tagColors", "tero"),
        [sty.rootvariations__1]: hasVariant($state, "variations", "_1"),
        [sty.rootvariations__2]: hasVariant($state, "variations", "_2"),
        [sty.rootvariations_unnamedVariant]: hasVariant(
          $state,
          "variations",
          "unnamedVariant"
        )
      })}
    >
      <p.Stack
        as={"div"}
        data-plasmic-name={"headerGroup"}
        data-plasmic-override={overrides.headerGroup}
        hasGap={true}
        className={classNames(projectcss.all, sty.headerGroup, {
          [sty.headerGroupbackground_image]: hasVariant(
            $state,
            "background",
            "image"
          ),
          [sty.headerGroupbackground_unnamedVariant]: hasVariant(
            $state,
            "background",
            "unnamedVariant"
          ),
          [sty.headerGroupborder_loose]: hasVariant($state, "border", "loose"),
          [sty.headerGroupborder_tight]: hasVariant($state, "border", "tight"),
          [sty.headerGrouphorizontalDirection]: hasVariant(
            $state,
            "horizontalDirection",
            "horizontalDirection"
          ),
          [sty.headerGroupjustification_center]: hasVariant(
            $state,
            "justification",
            "center"
          ),
          [sty.headerGroupvariations__1]: hasVariant($state, "variations", "_1")
        })}
      >
        <div
          data-plasmic-name={"column"}
          data-plasmic-override={overrides.column}
          className={classNames(projectcss.all, sty.column, {
            [sty.columnbackground_unnamedVariant]: hasVariant(
              $state,
              "background",
              "unnamedVariant"
            ),
            [sty.columnjustification_center]: hasVariant(
              $state,
              "justification",
              "center"
            )
          })}
        >
          <div
            className={classNames(projectcss.all, sty.freeBox__yJowm, {
              [sty.freeBoxbackground_unnamedVariant__yJowmQopj1]: hasVariant(
                $state,
                "background",
                "unnamedVariant"
              )
            })}
          >
            {p.renderPlasmicSlot({
              defaultContents: (
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__bGkVk)}
                  displayHeight={"100%"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"100%"}
                  loading={"lazy"}
                />
              ),

              value: args.children
            })}
          </div>
          <div
            className={classNames(projectcss.all, sty.freeBox__xV0Bk, {
              [sty.freeBoxbackground_unnamedVariant__xV0BkQopj1]: hasVariant(
                $state,
                "background",
                "unnamedVariant"
              ),
              [sty.freeBoxhorizontalDirection__xV0Bkc5Ngr]: hasVariant(
                $state,
                "horizontalDirection",
                "horizontalDirection"
              ),
              [sty.freeBoxjustification_center__xV0BkYCa2J]: hasVariant(
                $state,
                "justification",
                "center"
              ),
              [sty.freeBoxvariations__1__xV0BkSqh24]: hasVariant(
                $state,
                "variations",
                "_1"
              )
            })}
          >
            <div
              className={classNames(projectcss.all, sty.freeBox__oRzOw, {
                [sty.freeBoxbackground_unnamedVariant__oRzOwQopj1]: hasVariant(
                  $state,
                  "background",
                  "unnamedVariant"
                ),
                [sty.freeBoxborder_loose__oRzOwmm3VW]: hasVariant(
                  $state,
                  "border",
                  "loose"
                ),
                [sty.freeBoxhorizontalDirection__oRzOwc5Ngr]: hasVariant(
                  $state,
                  "horizontalDirection",
                  "horizontalDirection"
                ),
                [sty.freeBoxjustification_center__oRzOwYCa2J]: hasVariant(
                  $state,
                  "justification",
                  "center"
                ),
                [sty.freeBoxvariations__1__oRzOwSqh24]: hasVariant(
                  $state,
                  "variations",
                  "_1"
                )
              })}
            >
              <h6
                data-plasmic-name={"preHeading"}
                data-plasmic-override={overrides.preHeading}
                className={classNames(
                  projectcss.all,
                  projectcss.h6,
                  projectcss.__wab_text,
                  sty.preHeading,
                  {
                    [sty.preHeadingbackground_image]: hasVariant(
                      $state,
                      "background",
                      "image"
                    ),
                    [sty.preHeadingjustification_center]: hasVariant(
                      $state,
                      "justification",
                      "center"
                    ),
                    [sty.preHeadingjustification_justified]: hasVariant(
                      $state,
                      "justification",
                      "justified"
                    ),
                    [sty.preHeadingjustification_left]: hasVariant(
                      $state,
                      "justification",
                      "left"
                    ),
                    [sty.preHeadingjustification_right]: hasVariant(
                      $state,
                      "justification",
                      "right"
                    ),
                    [sty.preHeadingtagColors_tero]: hasVariant(
                      $state,
                      "tagColors",
                      "tero"
                    ),
                    [sty.preHeadingvariations__1]: hasVariant(
                      $state,
                      "variations",
                      "_1"
                    ),
                    [sty.preHeadingvariations__2]: hasVariant(
                      $state,
                      "variations",
                      "_2"
                    )
                  }
                )}
              >
                {"You won't believe what happens next."}
              </h6>
              <h1
                data-plasmic-name={"heading2"}
                data-plasmic-override={overrides.heading2}
                className={classNames(
                  projectcss.all,
                  projectcss.h1,
                  projectcss.__wab_text,
                  sty.heading2,
                  {
                    [sty.heading2background_image]: hasVariant(
                      $state,
                      "background",
                      "image"
                    ),
                    [sty.heading2background_unnamedVariant]: hasVariant(
                      $state,
                      "background",
                      "unnamedVariant"
                    ),
                    [sty.heading2colors_nook]: hasVariant(
                      $state,
                      "colors",
                      "nook"
                    ),
                    [sty.heading2colors_tero]: hasVariant(
                      $state,
                      "colors",
                      "tero"
                    ),
                    [sty.heading2horizontalDirection]: hasVariant(
                      $state,
                      "horizontalDirection",
                      "horizontalDirection"
                    ),
                    [sty.heading2justification_center]: hasVariant(
                      $state,
                      "justification",
                      "center"
                    ),
                    [sty.heading2justification_justified]: hasVariant(
                      $state,
                      "justification",
                      "justified"
                    ),
                    [sty.heading2justification_left]: hasVariant(
                      $state,
                      "justification",
                      "left"
                    ),
                    [sty.heading2justification_right]: hasVariant(
                      $state,
                      "justification",
                      "right"
                    ),
                    [sty.heading2tagColors_nook]: hasVariant(
                      $state,
                      "tagColors",
                      "nook"
                    ),
                    [sty.heading2variations__1]: hasVariant(
                      $state,
                      "variations",
                      "_1"
                    ),
                    [sty.heading2variations__2]: hasVariant(
                      $state,
                      "variations",
                      "_2"
                    )
                  }
                )}
              >
                {"You won't believe what happens next."}
              </h1>
            </div>
            <div
              className={classNames(projectcss.all, sty.freeBox__pAukh, {
                [sty.freeBoxbackground_unnamedVariant__pAukhQopj1]: hasVariant(
                  $state,
                  "background",
                  "unnamedVariant"
                ),
                [sty.freeBoxhorizontalDirection__pAukhc5Ngr]: hasVariant(
                  $state,
                  "horizontalDirection",
                  "horizontalDirection"
                ),
                [sty.freeBoxjustification_center__pAukhYCa2J]: hasVariant(
                  $state,
                  "justification",
                  "center"
                ),
                [sty.freeBoxvariations__1__pAukhSqh24]: hasVariant(
                  $state,
                  "variations",
                  "_1"
                )
              })}
            >
              <div
                data-plasmic-name={"content"}
                data-plasmic-override={overrides.content}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.content,
                  {
                    [sty.contentbackground_image]: hasVariant(
                      $state,
                      "background",
                      "image"
                    ),
                    [sty.contentbackground_unnamedVariant]: hasVariant(
                      $state,
                      "background",
                      "unnamedVariant"
                    ),
                    [sty.contenthorizontalDirection]: hasVariant(
                      $state,
                      "horizontalDirection",
                      "horizontalDirection"
                    ),
                    [sty.contentjustification_center]: hasVariant(
                      $state,
                      "justification",
                      "center"
                    ),
                    [sty.contentjustification_justified]: hasVariant(
                      $state,
                      "justification",
                      "justified"
                    ),
                    [sty.contentjustification_left]: hasVariant(
                      $state,
                      "justification",
                      "left"
                    ),
                    [sty.contentjustification_right]: hasVariant(
                      $state,
                      "justification",
                      "right"
                    ),
                    [sty.contentvariations__1]: hasVariant(
                      $state,
                      "variations",
                      "_1"
                    )
                  }
                )}
              >
                {
                  "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum."
                }
              </div>
              <div
                className={classNames(projectcss.all, sty.freeBox__noP3P, {
                  [sty.freeBoxbackground_image__noP3PuRpOr]: hasVariant(
                    $state,
                    "background",
                    "image"
                  ),
                  [sty.freeBoxbackground_unnamedVariant__noP3Pqopj1]:
                    hasVariant($state, "background", "unnamedVariant"),
                  [sty.freeBoxvariations__1__noP3Psqh24]: hasVariant(
                    $state,
                    "variations",
                    "_1"
                  )
                })}
              >
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox___4DGj, {
                    [sty.freeBoxbackground_image___4DGjuRpOr]: hasVariant(
                      $state,
                      "background",
                      "image"
                    ),
                    [sty.freeBoxjustification_center___4DGjYCa2J]: hasVariant(
                      $state,
                      "justification",
                      "center"
                    ),
                    [sty.freeBoxvariations__1___4DGjSqh24]: hasVariant(
                      $state,
                      "variations",
                      "_1"
                    ),
                    [sty.freeBoxvariations__2___4DGjzeK5X]: hasVariant(
                      $state,
                      "variations",
                      "_2"
                    )
                  })}
                >
                  <TextInput
                    data-plasmic-name={"textInput"}
                    data-plasmic-override={overrides.textInput}
                    className={classNames("__wab_instance", sty.textInput, {
                      [sty.textInputbackground_image]: hasVariant(
                        $state,
                        "background",
                        "image"
                      ),
                      [sty.textInputvariations__1]: hasVariant(
                        $state,
                        "variations",
                        "_1"
                      ),
                      [sty.textInputvariations__2]: hasVariant(
                        $state,
                        "variations",
                        "_2"
                      )
                    })}
                    onChange={(...eventArgs) => {
                      p.generateStateOnChangeProp($state, [
                        "textInput",
                        "value"
                      ])((e => e.target?.value).apply(null, eventArgs));
                    }}
                    value={
                      p.generateStateValueProp($state, [
                        "textInput",
                        "value"
                      ]) ?? ""
                    }
                  />

                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"buttonGroup"}
                    data-plasmic-override={overrides.buttonGroup}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.buttonGroup, {
                      [sty.buttonGroupjustification_center]: hasVariant(
                        $state,
                        "justification",
                        "center"
                      ),
                      [sty.buttonGroupvariations__1]: hasVariant(
                        $state,
                        "variations",
                        "_1"
                      )
                    })}
                  >
                    <Button
                      data-plasmic-name={"primaryButton"}
                      data-plasmic-override={overrides.primaryButton}
                      className={classNames(
                        "__wab_instance",
                        sty.primaryButton,
                        {
                          [sty.primaryButtonvariations__1]: hasVariant(
                            $state,
                            "variations",
                            "_1"
                          )
                        }
                      )}
                    >
                      {"Button"}
                    </Button>
                    <Button
                      data-plasmic-name={"secondaryButton"}
                      data-plasmic-override={overrides.secondaryButton}
                      className={classNames(
                        "__wab_instance",
                        sty.secondaryButton,
                        {
                          [sty.secondaryButtonvariations__1]: hasVariant(
                            $state,
                            "variations",
                            "_1"
                          )
                        }
                      )}
                      color={undefined}
                    >
                      {"Button"}
                    </Button>
                    {(
                      hasVariant($state, "background", "image") ? true : false
                    ) ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__nPQqp,
                          {
                            [sty.freeBoxbackground_image__nPQqpuRpOr]:
                              hasVariant($state, "background", "image")
                          }
                        )}
                      />
                    ) : null}
                  </p.Stack>
                </p.Stack>
                <div
                  data-plasmic-name={"text"}
                  data-plasmic-override={overrides.text}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text,
                    {
                      [sty.textbackground_image]: hasVariant(
                        $state,
                        "background",
                        "image"
                      ),
                      [sty.textbackground_unnamedVariant]: hasVariant(
                        $state,
                        "background",
                        "unnamedVariant"
                      ),
                      [sty.textjustification_center]: hasVariant(
                        $state,
                        "justification",
                        "center"
                      ),
                      [sty.textjustification_justified]: hasVariant(
                        $state,
                        "justification",
                        "justified"
                      ),
                      [sty.textjustification_left]: hasVariant(
                        $state,
                        "justification",
                        "left"
                      ),
                      [sty.textjustification_right]: hasVariant(
                        $state,
                        "justification",
                        "right"
                      ),
                      [sty.textvariations__1]: hasVariant(
                        $state,
                        "variations",
                        "_1"
                      ),
                      [sty.textvariations__2]: hasVariant(
                        $state,
                        "variations",
                        "_2"
                      )
                    }
                  )}
                >
                  {
                    "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed"
                  }
                </div>
              </div>
            </div>
          </div>
        </div>
      </p.Stack>
    </Section2>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "headerGroup",
    "column",
    "preHeading",
    "heading2",
    "content",
    "textInput",
    "buttonGroup",
    "primaryButton",
    "secondaryButton",
    "text"
  ],
  headerGroup: [
    "headerGroup",
    "column",
    "preHeading",
    "heading2",
    "content",
    "textInput",
    "buttonGroup",
    "primaryButton",
    "secondaryButton",
    "text"
  ],
  column: [
    "column",
    "preHeading",
    "heading2",
    "content",
    "textInput",
    "buttonGroup",
    "primaryButton",
    "secondaryButton",
    "text"
  ],
  preHeading: ["preHeading"],
  heading2: ["heading2"],
  content: ["content"],
  textInput: ["textInput"],
  buttonGroup: ["buttonGroup", "primaryButton", "secondaryButton"],
  primaryButton: ["primaryButton"],
  secondaryButton: ["secondaryButton"],
  text: ["text"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: typeof Section2;
  headerGroup: "div";
  column: "div";
  preHeading: "h6";
  heading2: "h1";
  content: "div";
  textInput: typeof TextInput;
  buttonGroup: "div";
  primaryButton: typeof Button;
  secondaryButton: typeof Button;
  text: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHeader__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHeader__VariantsArgs;
    args?: PlasmicHeader__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHeader__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicHeader__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHeader__ArgProps,
          internalVariantPropNames: PlasmicHeader__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHeader__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHeader";
  } else {
    func.displayName = `PlasmicHeader.${nodeName}`;
  }
  return func;
}

export const PlasmicHeader = Object.assign(
  // Top-level PlasmicHeader renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    headerGroup: makeNodeComponent("headerGroup"),
    column: makeNodeComponent("column"),
    preHeading: makeNodeComponent("preHeading"),
    heading2: makeNodeComponent("heading2"),
    content: makeNodeComponent("content"),
    textInput: makeNodeComponent("textInput"),
    buttonGroup: makeNodeComponent("buttonGroup"),
    primaryButton: makeNodeComponent("primaryButton"),
    secondaryButton: makeNodeComponent("secondaryButton"),
    text: makeNodeComponent("text"),

    // Metadata about props expected for PlasmicHeader
    internalVariantProps: PlasmicHeader__VariantProps,
    internalArgProps: PlasmicHeader__ArgProps
  }
);

export default PlasmicHeader;
/* prettier-ignore-end */

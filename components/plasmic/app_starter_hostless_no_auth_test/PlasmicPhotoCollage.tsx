// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: waVhN6sKC41JduCkjZHFuq
// Component: 4ZXeyqL2jAbI

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_app_starter_hostless_no_auth_test.module.css"; // plasmic-import: waVhN6sKC41JduCkjZHFuq/projectcss
import sty from "./PlasmicPhotoCollage.module.css"; // plasmic-import: 4ZXeyqL2jAbI/css

createPlasmicElementProxy;

export type PlasmicPhotoCollage__VariantMembers = {
  variations: "orientation";
};
export type PlasmicPhotoCollage__VariantsArgs = {
  variations?: SingleChoiceArg<"orientation">;
};
type VariantPropType = keyof PlasmicPhotoCollage__VariantsArgs;
export const PlasmicPhotoCollage__VariantProps = new Array<VariantPropType>(
  "variations"
);

export type PlasmicPhotoCollage__ArgsType = {
  children?: React.ReactNode;
  children2?: React.ReactNode;
  children3?: React.ReactNode;
  children4?: React.ReactNode;
  children5?: React.ReactNode;
  children6?: React.ReactNode;
  children8?: React.ReactNode;
  children9?: React.ReactNode;
  children10?: React.ReactNode;
  children11?: React.ReactNode;
  children12?: React.ReactNode;
};
type ArgPropType = keyof PlasmicPhotoCollage__ArgsType;
export const PlasmicPhotoCollage__ArgProps = new Array<ArgPropType>(
  "children",
  "children2",
  "children3",
  "children4",
  "children5",
  "children6",
  "children8",
  "children9",
  "children10",
  "children11",
  "children12"
);

export type PlasmicPhotoCollage__OverridesType = {
  root?: p.Flex<"div">;
};

export interface DefaultPhotoCollageProps {
  children?: React.ReactNode;
  children2?: React.ReactNode;
  children3?: React.ReactNode;
  children4?: React.ReactNode;
  children5?: React.ReactNode;
  children6?: React.ReactNode;
  children8?: React.ReactNode;
  children9?: React.ReactNode;
  children10?: React.ReactNode;
  children11?: React.ReactNode;
  children12?: React.ReactNode;
  variations?: SingleChoiceArg<"orientation">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicPhotoCollage__RenderFunc(props: {
  variants: PlasmicPhotoCollage__VariantsArgs;
  args: PlasmicPhotoCollage__ArgsType;
  overrides: PlasmicPhotoCollage__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof p.useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "variations",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.variations
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = p.useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root,
        {
          [sty.rootvariations_orientation]: hasVariant(
            $state,
            "variations",
            "orientation"
          )
        }
      )}
    >
      <div
        className={classNames(projectcss.all, sty.freeBox__cE5Gn, {
          [sty.freeBoxvariations_orientation__cE5GntWrc7]: hasVariant(
            $state,
            "variations",
            "orientation"
          )
        })}
      >
        <div
          className={classNames(projectcss.all, sty.freeBox__pU5Mn, {
            [sty.freeBoxvariations_orientation__pU5MNtWrc7]: hasVariant(
              $state,
              "variations",
              "orientation"
            )
          })}
        >
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__dvPOu, {
              [sty.freeBoxvariations_orientation__dvPOutWrc7]: hasVariant(
                $state,
                "variations",
                "orientation"
              )
            })}
          >
            {p.renderPlasmicSlot({
              defaultContents: (
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__l4AO, {
                    [sty.imgvariations_orientation__l4AOtWrc7]: hasVariant(
                      $state,
                      "variations",
                      "orientation"
                    )
                  })}
                  displayHeight={"100%"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"100%"}
                  loading={"lazy"}
                />
              ),

              value: args.children
            })}
          </p.Stack>
          <div
            className={classNames(projectcss.all, sty.freeBox__jygKl, {
              [sty.freeBoxvariations_orientation__jygKLtWrc7]: hasVariant(
                $state,
                "variations",
                "orientation"
              )
            })}
          >
            {p.renderPlasmicSlot({
              defaultContents: (
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__f6Twm, {
                    [sty.imgvariations_orientation__f6TwMtWrc7]: hasVariant(
                      $state,
                      "variations",
                      "orientation"
                    )
                  })}
                  displayHeight={"100%"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"100%"}
                  loading={"lazy"}
                />
              ),

              value: args.children2
            })}
          </div>
          <div
            className={classNames(projectcss.all, sty.freeBox___52Fnr, {
              [sty.freeBoxvariations_orientation___52FnRtWrc7]: hasVariant(
                $state,
                "variations",
                "orientation"
              )
            })}
          >
            {p.renderPlasmicSlot({
              defaultContents: (
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__hyuB, {
                    [sty.imgvariations_orientation__hyuBtWrc7]: hasVariant(
                      $state,
                      "variations",
                      "orientation"
                    )
                  })}
                  displayHeight={"100%"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"100%"}
                  loading={"lazy"}
                />
              ),

              value: args.children3
            })}
          </div>
          <div
            className={classNames(projectcss.all, sty.freeBox__fgaX, {
              [sty.freeBoxvariations_orientation__fgaXtWrc7]: hasVariant(
                $state,
                "variations",
                "orientation"
              )
            })}
          >
            {p.renderPlasmicSlot({
              defaultContents: (
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__m99C0, {
                    [sty.imgvariations_orientation__m99C0TWrc7]: hasVariant(
                      $state,
                      "variations",
                      "orientation"
                    )
                  })}
                  displayHeight={"100%"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"100%"}
                  loading={"lazy"}
                />
              ),

              value: args.children4
            })}
          </div>
          <div
            className={classNames(projectcss.all, sty.freeBox__qIuFj, {
              [sty.freeBoxvariations_orientation__qIuFJtWrc7]: hasVariant(
                $state,
                "variations",
                "orientation"
              )
            })}
          >
            {p.renderPlasmicSlot({
              defaultContents: (
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__qigR, {
                    [sty.imgvariations_orientation__qigRtWrc7]: hasVariant(
                      $state,
                      "variations",
                      "orientation"
                    )
                  })}
                  displayHeight={"100%"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"100%"}
                  loading={"lazy"}
                />
              ),

              value: args.children5
            })}
          </div>
          <div
            className={classNames(projectcss.all, sty.freeBox___14MH, {
              [sty.freeBoxvariations_orientation___14MHtWrc7]: hasVariant(
                $state,
                "variations",
                "orientation"
              )
            })}
          >
            {p.renderPlasmicSlot({
              defaultContents: (
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__peB43, {
                    [sty.imgvariations_orientation__peB43TWrc7]: hasVariant(
                      $state,
                      "variations",
                      "orientation"
                    )
                  })}
                  displayHeight={"100%"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"100%"}
                  loading={"lazy"}
                />
              ),

              value: args.children6
            })}
          </div>
        </div>
        <div
          className={classNames(projectcss.all, sty.freeBox__bVDaL, {
            [sty.freeBoxvariations_orientation__bVDaLtWrc7]: hasVariant(
              $state,
              "variations",
              "orientation"
            )
          })}
        >
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__b3H1O, {
              [sty.freeBoxvariations_orientation__b3H1OtWrc7]: hasVariant(
                $state,
                "variations",
                "orientation"
              )
            })}
          >
            {p.renderPlasmicSlot({
              defaultContents: (
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__d24Rv, {
                    [sty.imgvariations_orientation__d24RvtWrc7]: hasVariant(
                      $state,
                      "variations",
                      "orientation"
                    )
                  })}
                  displayHeight={"100%"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"100%"}
                  loading={"lazy"}
                />
              ),

              value: args.children8
            })}
          </p.Stack>
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__mwsgI, {
              [sty.freeBoxvariations_orientation__mwsgItWrc7]: hasVariant(
                $state,
                "variations",
                "orientation"
              )
            })}
          >
            {p.renderPlasmicSlot({
              defaultContents: (
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__dPpNt, {
                    [sty.imgvariations_orientation__dPpNttWrc7]: hasVariant(
                      $state,
                      "variations",
                      "orientation"
                    )
                  })}
                  displayHeight={"100%"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"100%"}
                  loading={"lazy"}
                />
              ),

              value: args.children9
            })}
          </p.Stack>
          <div
            className={classNames(projectcss.all, sty.freeBox__mavu, {
              [sty.freeBoxvariations_orientation__mavuTWrc7]: hasVariant(
                $state,
                "variations",
                "orientation"
              )
            })}
          >
            {p.renderPlasmicSlot({
              defaultContents: (
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__iq7R, {
                    [sty.imgvariations_orientation__iq7RtWrc7]: hasVariant(
                      $state,
                      "variations",
                      "orientation"
                    )
                  })}
                  displayHeight={"100%"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"100%"}
                  loading={"lazy"}
                />
              ),

              value: args.children10
            })}
          </div>
          <div
            className={classNames(projectcss.all, sty.freeBox__slLnl, {
              [sty.freeBoxvariations_orientation__slLnltWrc7]: hasVariant(
                $state,
                "variations",
                "orientation"
              )
            })}
          >
            {p.renderPlasmicSlot({
              defaultContents: (
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__cv8LS, {
                    [sty.imgvariations_orientation__cv8LStWrc7]: hasVariant(
                      $state,
                      "variations",
                      "orientation"
                    )
                  })}
                  displayHeight={"100%"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"100%"}
                  loading={"lazy"}
                />
              ),

              value: args.children11
            })}
          </div>
          <div
            className={classNames(projectcss.all, sty.freeBox__k97T, {
              [sty.freeBoxvariations_orientation__k97TtWrc7]: hasVariant(
                $state,
                "variations",
                "orientation"
              )
            })}
          >
            {p.renderPlasmicSlot({
              defaultContents: (
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__wDXgl, {
                    [sty.imgvariations_orientation__wDXgltWrc7]: hasVariant(
                      $state,
                      "variations",
                      "orientation"
                    )
                  })}
                  displayHeight={"100%"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"100%"}
                  loading={"lazy"}
                />
              ),

              value: args.children12
            })}
          </div>
        </div>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicPhotoCollage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicPhotoCollage__VariantsArgs;
    args?: PlasmicPhotoCollage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicPhotoCollage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicPhotoCollage__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicPhotoCollage__ArgProps,
          internalVariantPropNames: PlasmicPhotoCollage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicPhotoCollage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicPhotoCollage";
  } else {
    func.displayName = `PlasmicPhotoCollage.${nodeName}`;
  }
  return func;
}

export const PlasmicPhotoCollage = Object.assign(
  // Top-level PlasmicPhotoCollage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicPhotoCollage
    internalVariantProps: PlasmicPhotoCollage__VariantProps,
    internalArgProps: PlasmicPhotoCollage__ArgProps
  }
);

export default PlasmicPhotoCollage;
/* prettier-ignore-end */

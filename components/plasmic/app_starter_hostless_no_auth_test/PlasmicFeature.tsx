// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: waVhN6sKC41JduCkjZHFuq
// Component: AoZR2s1w7M8S

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import TextInput from "../../TextInput"; // plasmic-import: JcoJaQnJKJTs/component
import Button from "../../Button"; // plasmic-import: XVnqJFFWe0Ng/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_app_starter_hostless_no_auth_test.module.css"; // plasmic-import: waVhN6sKC41JduCkjZHFuq/projectcss
import sty from "./PlasmicFeature.module.css"; // plasmic-import: AoZR2s1w7M8S/css

import SearchsvgIcon from "./icons/PlasmicIcon__Searchsvg"; // plasmic-import: 73TpZHBbWv9h/icon
import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: oo3GFQUuqF3Z/icon
import IconmonstrRefresh1SvgIcon from "./icons/PlasmicIcon__IconmonstrRefresh1Svg"; // plasmic-import: TCibwKfmasdI/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: dxj71VlIakcj/icon

createPlasmicElementProxy;

export type PlasmicFeature__VariantMembers = {
  bgColors:
    | "themeBaseLowest"
    | "themeBaseLower"
    | "themeBaseLow"
    | "themeBase"
    | "themeBaseHigh"
    | "themeBaseHigher"
    | "themeBaseHIghest"
    | "unnamedVariant"
    | "unnamedVariant2"
    | "unnamedVariant3"
    | "unnamedVariant4"
    | "unnamedVariant5"
    | "unnamedVariant6"
    | "unnamedVariant7"
    | "unnamedVariant8"
    | "unnamedVariant9"
    | "unnamedVariant10"
    | "unnamedVariant11"
    | "unnamedVariant12"
    | "unnamedVariant13"
    | "unnamedVariant14"
    | "unnamedVariant15"
    | "unnamedVariant16"
    | "unnamedVariant17"
    | "unnamedVariant18"
    | "unnamedVariant19"
    | "unnamedVariant20";
};
export type PlasmicFeature__VariantsArgs = {
  bgColors?: SingleChoiceArg<
    | "themeBaseLowest"
    | "themeBaseLower"
    | "themeBaseLow"
    | "themeBase"
    | "themeBaseHigh"
    | "themeBaseHigher"
    | "themeBaseHIghest"
    | "unnamedVariant"
    | "unnamedVariant2"
    | "unnamedVariant3"
    | "unnamedVariant4"
    | "unnamedVariant5"
    | "unnamedVariant6"
    | "unnamedVariant7"
    | "unnamedVariant8"
    | "unnamedVariant9"
    | "unnamedVariant10"
    | "unnamedVariant11"
    | "unnamedVariant12"
    | "unnamedVariant13"
    | "unnamedVariant14"
    | "unnamedVariant15"
    | "unnamedVariant16"
    | "unnamedVariant17"
    | "unnamedVariant18"
    | "unnamedVariant19"
    | "unnamedVariant20"
  >;
};
type VariantPropType = keyof PlasmicFeature__VariantsArgs;
export const PlasmicFeature__VariantProps = new Array<VariantPropType>(
  "bgColors"
);

export type PlasmicFeature__ArgsType = {
  children?: React.ReactNode;
  textInput2?: React.ReactNode;
  slot?: React.ReactNode;
  slot2?: React.ReactNode;
  slot3?: React.ReactNode;
  slot4?: React.ReactNode;
};
type ArgPropType = keyof PlasmicFeature__ArgsType;
export const PlasmicFeature__ArgProps = new Array<ArgPropType>(
  "children",
  "textInput2",
  "slot",
  "slot2",
  "slot3",
  "slot4"
);

export type PlasmicFeature__OverridesType = {
  componentSection?: p.Flex<"div">;
  section?: p.Flex<"section">;
  h6?: p.Flex<"h6">;
  h1?: p.Flex<"h1">;
};

export interface DefaultFeatureProps {
  children?: React.ReactNode;
  textInput2?: React.ReactNode;
  slot?: React.ReactNode;
  slot2?: React.ReactNode;
  slot3?: React.ReactNode;
  slot4?: React.ReactNode;
  bgColors?: SingleChoiceArg<
    | "themeBaseLowest"
    | "themeBaseLower"
    | "themeBaseLow"
    | "themeBase"
    | "themeBaseHigh"
    | "themeBaseHigher"
    | "themeBaseHIghest"
    | "unnamedVariant"
    | "unnamedVariant2"
    | "unnamedVariant3"
    | "unnamedVariant4"
    | "unnamedVariant5"
    | "unnamedVariant6"
    | "unnamedVariant7"
    | "unnamedVariant8"
    | "unnamedVariant9"
    | "unnamedVariant10"
    | "unnamedVariant11"
    | "unnamedVariant12"
    | "unnamedVariant13"
    | "unnamedVariant14"
    | "unnamedVariant15"
    | "unnamedVariant16"
    | "unnamedVariant17"
    | "unnamedVariant18"
    | "unnamedVariant19"
    | "unnamedVariant20"
  >;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicFeature__RenderFunc(props: {
  variants: PlasmicFeature__VariantsArgs;
  args: PlasmicFeature__ArgsType;
  overrides: PlasmicFeature__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof p.useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "bgColors",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.bgColors
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = p.useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <div
      data-plasmic-name={"componentSection"}
      data-plasmic-override={overrides.componentSection}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.componentSection,
        {
          [sty.componentSectionbgColors_themeBaseHIghest]: hasVariant(
            $state,
            "bgColors",
            "themeBaseHIghest"
          ),
          [sty.componentSectionbgColors_themeBaseHigh]: hasVariant(
            $state,
            "bgColors",
            "themeBaseHigh"
          ),
          [sty.componentSectionbgColors_themeBaseHigher]: hasVariant(
            $state,
            "bgColors",
            "themeBaseHigher"
          ),
          [sty.componentSectionbgColors_themeBaseLow]: hasVariant(
            $state,
            "bgColors",
            "themeBaseLow"
          ),
          [sty.componentSectionbgColors_themeBaseLower]: hasVariant(
            $state,
            "bgColors",
            "themeBaseLower"
          ),
          [sty.componentSectionbgColors_themeBaseLowest]: hasVariant(
            $state,
            "bgColors",
            "themeBaseLowest"
          ),
          [sty.componentSectionbgColors_themeBase]: hasVariant(
            $state,
            "bgColors",
            "themeBase"
          ),
          [sty.componentSectionbgColors_unnamedVariant10]: hasVariant(
            $state,
            "bgColors",
            "unnamedVariant10"
          ),
          [sty.componentSectionbgColors_unnamedVariant11]: hasVariant(
            $state,
            "bgColors",
            "unnamedVariant11"
          ),
          [sty.componentSectionbgColors_unnamedVariant12]: hasVariant(
            $state,
            "bgColors",
            "unnamedVariant12"
          ),
          [sty.componentSectionbgColors_unnamedVariant13]: hasVariant(
            $state,
            "bgColors",
            "unnamedVariant13"
          ),
          [sty.componentSectionbgColors_unnamedVariant14]: hasVariant(
            $state,
            "bgColors",
            "unnamedVariant14"
          ),
          [sty.componentSectionbgColors_unnamedVariant15]: hasVariant(
            $state,
            "bgColors",
            "unnamedVariant15"
          ),
          [sty.componentSectionbgColors_unnamedVariant16]: hasVariant(
            $state,
            "bgColors",
            "unnamedVariant16"
          ),
          [sty.componentSectionbgColors_unnamedVariant17]: hasVariant(
            $state,
            "bgColors",
            "unnamedVariant17"
          ),
          [sty.componentSectionbgColors_unnamedVariant18]: hasVariant(
            $state,
            "bgColors",
            "unnamedVariant18"
          ),
          [sty.componentSectionbgColors_unnamedVariant19]: hasVariant(
            $state,
            "bgColors",
            "unnamedVariant19"
          ),
          [sty.componentSectionbgColors_unnamedVariant20]: hasVariant(
            $state,
            "bgColors",
            "unnamedVariant20"
          ),
          [sty.componentSectionbgColors_unnamedVariant2]: hasVariant(
            $state,
            "bgColors",
            "unnamedVariant2"
          ),
          [sty.componentSectionbgColors_unnamedVariant3]: hasVariant(
            $state,
            "bgColors",
            "unnamedVariant3"
          ),
          [sty.componentSectionbgColors_unnamedVariant4]: hasVariant(
            $state,
            "bgColors",
            "unnamedVariant4"
          ),
          [sty.componentSectionbgColors_unnamedVariant5]: hasVariant(
            $state,
            "bgColors",
            "unnamedVariant5"
          ),
          [sty.componentSectionbgColors_unnamedVariant6]: hasVariant(
            $state,
            "bgColors",
            "unnamedVariant6"
          ),
          [sty.componentSectionbgColors_unnamedVariant7]: hasVariant(
            $state,
            "bgColors",
            "unnamedVariant7"
          ),
          [sty.componentSectionbgColors_unnamedVariant8]: hasVariant(
            $state,
            "bgColors",
            "unnamedVariant8"
          ),
          [sty.componentSectionbgColors_unnamedVariant9]: hasVariant(
            $state,
            "bgColors",
            "unnamedVariant9"
          ),
          [sty.componentSectionbgColors_unnamedVariant]: hasVariant(
            $state,
            "bgColors",
            "unnamedVariant"
          )
        }
      )}
    >
      <section
        data-plasmic-name={"section"}
        data-plasmic-override={overrides.section}
        className={classNames(projectcss.all, sty.section, {
          [sty.sectionbgColors_themeBaseLowest]: hasVariant(
            $state,
            "bgColors",
            "themeBaseLowest"
          ),
          [sty.sectionbgColors_unnamedVariant2]: hasVariant(
            $state,
            "bgColors",
            "unnamedVariant2"
          ),
          [sty.sectionbgColors_unnamedVariant4]: hasVariant(
            $state,
            "bgColors",
            "unnamedVariant4"
          ),
          [sty.sectionbgColors_unnamedVariant]: hasVariant(
            $state,
            "bgColors",
            "unnamedVariant"
          )
        })}
      >
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__zO2Nn)}
        >
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox___1FsDa)}
          >
            <h6
              data-plasmic-name={"h6"}
              data-plasmic-override={overrides.h6}
              className={classNames(projectcss.all, projectcss.h6, sty.h6)}
            >
              {p.renderPlasmicSlot({
                defaultContents: "Descriptive Tagline",
                value: args.slot2,
                className: classNames(sty.slotTargetSlot2)
              })}
            </h6>
            <h1
              data-plasmic-name={"h1"}
              data-plasmic-override={overrides.h1}
              className={classNames(projectcss.all, projectcss.h1, sty.h1)}
            >
              {p.renderPlasmicSlot({
                defaultContents: "Exciting Headline",
                value: args.slot3
              })}
            </h1>
            <div className={classNames(projectcss.all, sty.freeBox__tboAx)}>
              {p.renderPlasmicSlot({
                defaultContents:
                  "This is where the main content of the component goes. It can be anything you want to say. It should be about 3-5 sentences long. The content should align with the other elements like the tagline, heading, buttons and images. ",
                value: args.slot4
              })}
            </div>
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__zzazy)}
            >
              {p.renderPlasmicSlot({
                defaultContents: (
                  <TextInput
                    className={classNames(
                      "__wab_instance",
                      sty.textInput__vGkrk
                    )}
                  />
                ),

                value: args.textInput2
              })}
              {p.renderPlasmicSlot({
                defaultContents: (
                  <Button
                    className={classNames("__wab_instance", sty.button___0XbMl)}
                  />
                ),

                value: args.children
              })}
            </p.Stack>
          </p.Stack>
          {p.renderPlasmicSlot({
            defaultContents: (
              <p.PlasmicImg
                alt={""}
                className={classNames(sty.img__zrw8Y)}
                displayHeight={"100%"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"100%"}
                loading={"lazy"}
              />
            ),

            value: args.slot
          })}
        </p.Stack>
      </section>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  componentSection: ["componentSection", "section", "h6", "h1"],
  section: ["section", "h6", "h1"],
  h6: ["h6"],
  h1: ["h1"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  componentSection: "div";
  section: "section";
  h6: "h6";
  h1: "h1";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicFeature__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicFeature__VariantsArgs;
    args?: PlasmicFeature__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicFeature__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicFeature__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicFeature__ArgProps,
          internalVariantPropNames: PlasmicFeature__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicFeature__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "componentSection") {
    func.displayName = "PlasmicFeature";
  } else {
    func.displayName = `PlasmicFeature.${nodeName}`;
  }
  return func;
}

export const PlasmicFeature = Object.assign(
  // Top-level PlasmicFeature renders the root element
  makeNodeComponent("componentSection"),
  {
    // Helper components rendering sub-elements
    section: makeNodeComponent("section"),
    h6: makeNodeComponent("h6"),
    h1: makeNodeComponent("h1"),

    // Metadata about props expected for PlasmicFeature
    internalVariantProps: PlasmicFeature__VariantProps,
    internalArgProps: PlasmicFeature__ArgProps
  }
);

export default PlasmicFeature;
/* prettier-ignore-end */

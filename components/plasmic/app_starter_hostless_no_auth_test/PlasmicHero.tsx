// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: waVhN6sKC41JduCkjZHFuq
// Component: l5TT4PHMsqwk

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Section2 from "../../Section2"; // plasmic-import: PEC5-llnbLr9/component
import TextInput from "../../TextInput"; // plasmic-import: JcoJaQnJKJTs/component
import Button from "../../Button"; // plasmic-import: XVnqJFFWe0Ng/component
import PhotoCollage from "../../PhotoCollage"; // plasmic-import: 4ZXeyqL2jAbI/component

import { useScreenVariants as useScreenVariantsogPeTNssmuP2 } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: OGPeTNssmuP2/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_app_starter_hostless_no_auth_test.module.css"; // plasmic-import: waVhN6sKC41JduCkjZHFuq/projectcss
import sty from "./PlasmicHero.module.css"; // plasmic-import: l5TT4PHMsqwk/css

import SearchsvgIcon from "./icons/PlasmicIcon__Searchsvg"; // plasmic-import: 73TpZHBbWv9h/icon
import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: oo3GFQUuqF3Z/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: dxj71VlIakcj/icon

createPlasmicElementProxy;

export type PlasmicHero__VariantMembers = {
  variations: "_1" | "_2";
  background: "white" | "picture";
  border: "tight" | "loose";
  justification: "center" | "justified" | "left" | "right";
  orientation: "bottom" | "top" | "left";
  spacing:
    | "slimHorizontalOuterSides"
    | "slimVerticalSides"
    | "silmInnerLeft"
    | "silmInnerRight"
    | "silmInnerUpper"
    | "slimInnerBottom";
  photoOption: "unnamedVariant";
};
export type PlasmicHero__VariantsArgs = {
  variations?: SingleChoiceArg<"_1" | "_2">;
  background?: SingleChoiceArg<"white" | "picture">;
  border?: MultiChoiceArg<"tight" | "loose">;
  justification?: MultiChoiceArg<"center" | "justified" | "left" | "right">;
  orientation?: SingleChoiceArg<"bottom" | "top" | "left">;
  spacing?: MultiChoiceArg<
    | "slimHorizontalOuterSides"
    | "slimVerticalSides"
    | "silmInnerLeft"
    | "silmInnerRight"
    | "silmInnerUpper"
    | "slimInnerBottom"
  >;
  photoOption?: SingleChoiceArg<"unnamedVariant">;
};
type VariantPropType = keyof PlasmicHero__VariantsArgs;
export const PlasmicHero__VariantProps = new Array<VariantPropType>(
  "variations",
  "background",
  "border",
  "justification",
  "orientation",
  "spacing",
  "photoOption"
);

export type PlasmicHero__ArgsType = {
  section?: string;
  children?: React.ReactNode;
  slot?: React.ReactNode;
  slot2?: React.ReactNode;
  slot3?: React.ReactNode;
  slot4?: React.ReactNode;
  children2?: React.ReactNode;
};
type ArgPropType = keyof PlasmicHero__ArgsType;
export const PlasmicHero__ArgProps = new Array<ArgPropType>(
  "section",
  "children",
  "slot",
  "slot2",
  "slot3",
  "slot4",
  "children2"
);

export type PlasmicHero__OverridesType = {
  root?: p.Flex<typeof Section2>;
  headerGroup?: p.Flex<"div">;
  heading4?: p.Flex<"h1">;
  content?: p.Flex<"div">;
  textInput?: p.Flex<typeof TextInput>;
  buttonGroup?: p.Flex<"div">;
  primaryButton?: p.Flex<typeof Button>;
  secondaryButton?: p.Flex<typeof Button>;
  text?: p.Flex<"div">;
  img?: p.Flex<typeof p.PlasmicImg>;
};

export interface DefaultHeroProps {
  section?: string;
  children?: React.ReactNode;
  slot?: React.ReactNode;
  slot2?: React.ReactNode;
  slot3?: React.ReactNode;
  slot4?: React.ReactNode;
  children2?: React.ReactNode;
  variations?: SingleChoiceArg<"_1" | "_2">;
  background?: SingleChoiceArg<"white" | "picture">;
  border?: MultiChoiceArg<"tight" | "loose">;
  justification?: MultiChoiceArg<"center" | "justified" | "left" | "right">;
  orientation?: SingleChoiceArg<"bottom" | "top" | "left">;
  spacing?: MultiChoiceArg<
    | "slimHorizontalOuterSides"
    | "slimVerticalSides"
    | "silmInnerLeft"
    | "silmInnerRight"
    | "silmInnerUpper"
    | "slimInnerBottom"
  >;
  photoOption?: SingleChoiceArg<"unnamedVariant">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHero__RenderFunc(props: {
  variants: PlasmicHero__VariantsArgs;
  args: PlasmicHero__ArgsType;
  overrides: PlasmicHero__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof p.useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "variations",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.variations
      },
      {
        path: "background",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.background
      },
      {
        path: "border",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.border
      },
      {
        path: "justification",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.justification
      },
      {
        path: "orientation",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.orientation
      },
      {
        path: "spacing",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.spacing
      },
      {
        path: "photoOption",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.photoOption
      },
      {
        path: "textInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = p.useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsogPeTNssmuP2()
  });

  return (
    <Section2
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames("__wab_instance", sty.root, {
        [sty.rootbackground_picture]: hasVariant(
          $state,
          "background",
          "picture"
        ),
        [sty.rootbackground_white]: hasVariant($state, "background", "white"),
        [sty.rootborder_loose]: hasVariant($state, "border", "loose"),
        [sty.rootborder_tight]: hasVariant($state, "border", "tight"),
        [sty.rootjustification_center]: hasVariant(
          $state,
          "justification",
          "center"
        ),
        [sty.rootjustification_justified]: hasVariant(
          $state,
          "justification",
          "justified"
        ),
        [sty.rootjustification_left]: hasVariant(
          $state,
          "justification",
          "left"
        ),
        [sty.rootjustification_right]: hasVariant(
          $state,
          "justification",
          "right"
        ),
        [sty.rootorientation_bottom]: hasVariant(
          $state,
          "orientation",
          "bottom"
        ),
        [sty.rootorientation_left]: hasVariant($state, "orientation", "left"),
        [sty.rootorientation_top]: hasVariant($state, "orientation", "top"),
        [sty.rootphotoOption_unnamedVariant]: hasVariant(
          $state,
          "photoOption",
          "unnamedVariant"
        ),
        [sty.rootspacing_silmInnerLeft]: hasVariant(
          $state,
          "spacing",
          "silmInnerLeft"
        ),
        [sty.rootspacing_silmInnerRight]: hasVariant(
          $state,
          "spacing",
          "silmInnerRight"
        ),
        [sty.rootspacing_silmInnerUpper]: hasVariant(
          $state,
          "spacing",
          "silmInnerUpper"
        ),
        [sty.rootspacing_slimHorizontalOuterSides]: hasVariant(
          $state,
          "spacing",
          "slimHorizontalOuterSides"
        ),
        [sty.rootspacing_slimInnerBottom]: hasVariant(
          $state,
          "spacing",
          "slimInnerBottom"
        ),
        [sty.rootspacing_slimVerticalSides]: hasVariant(
          $state,
          "spacing",
          "slimVerticalSides"
        ),
        [sty.rootvariations__1]: hasVariant($state, "variations", "_1"),
        [sty.rootvariations__2]: hasVariant($state, "variations", "_2")
      })}
      size={
        hasVariant($state, "spacing", "slimVerticalSides")
          ? ["noTop", "noBottom"]
          : hasVariant($state, "spacing", "slimHorizontalOuterSides")
          ? ["noLeftSide", "noRightSide"]
          : undefined
      }
    >
      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__ingNc, {
          [sty.freeBoxbackground_picture__ingNcThny]: hasVariant(
            $state,
            "background",
            "picture"
          )
        })}
      >
        <div
          className={classNames(projectcss.all, sty.freeBox__prY53, {
            [sty.freeBoxbackground_picture__prY53Thny]: hasVariant(
              $state,
              "background",
              "picture"
            ),
            [sty.freeBoxvariations__2__prY53RGy8]: hasVariant(
              $state,
              "variations",
              "_2"
            )
          })}
        >
          {p.renderPlasmicSlot({
            defaultContents: (
              <p.PlasmicImg
                alt={""}
                className={classNames(sty.img__wBjeq)}
                displayHeight={"100%"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"100%"}
                loading={"lazy"}
              />
            ),

            value: args.slot
          })}
        </div>
        <p.Stack
          as={"div"}
          data-plasmic-name={"headerGroup"}
          data-plasmic-override={overrides.headerGroup}
          hasGap={true}
          className={classNames(projectcss.all, sty.headerGroup, {
            [sty.headerGroupbackground_picture]: hasVariant(
              $state,
              "background",
              "picture"
            ),
            [sty.headerGroupborder_loose]: hasVariant(
              $state,
              "border",
              "loose"
            ),
            [sty.headerGroupborder_tight]: hasVariant(
              $state,
              "border",
              "tight"
            ),
            [sty.headerGroupjustification_center]: hasVariant(
              $state,
              "justification",
              "center"
            ),
            [sty.headerGrouporientation_bottom]: hasVariant(
              $state,
              "orientation",
              "bottom"
            ),
            [sty.headerGrouporientation_top]: hasVariant(
              $state,
              "orientation",
              "top"
            ),
            [sty.headerGroupvariations__1]: hasVariant(
              $state,
              "variations",
              "_1"
            )
          })}
        >
          <div
            className={classNames(projectcss.all, sty.column__qrtd5, {
              [sty.columnbackground_picture__qrtd5Thny]: hasVariant(
                $state,
                "background",
                "picture"
              ),
              [sty.columnbackground_white__qrtd5ExKgD]: hasVariant(
                $state,
                "background",
                "white"
              ),
              [sty.columnjustification_center__qrtd50Cu5R]: hasVariant(
                $state,
                "justification",
                "center"
              ),
              [sty.columnorientation_bottom__qrtd5HsqEp]: hasVariant(
                $state,
                "orientation",
                "bottom"
              ),
              [sty.columnorientation_top__qrtd5OjwIe]: hasVariant(
                $state,
                "orientation",
                "top"
              ),
              [sty.columnspacing_silmInnerLeft__qrtd57Dq2A]: hasVariant(
                $state,
                "spacing",
                "silmInnerLeft"
              ),
              [sty.columnspacing_silmInnerRight__qrtd5NQc2Y]: hasVariant(
                $state,
                "spacing",
                "silmInnerRight"
              ),
              [sty.columnspacing_silmInnerUpper__qrtd5Sm8]: hasVariant(
                $state,
                "spacing",
                "silmInnerUpper"
              ),
              [sty.columnspacing_slimInnerBottom__qrtd5Hfi1E]: hasVariant(
                $state,
                "spacing",
                "slimInnerBottom"
              ),
              [sty.columnspacing_slimVerticalSides__qrtd5DN9Fj]: hasVariant(
                $state,
                "spacing",
                "slimVerticalSides"
              )
            })}
          >
            <div
              className={classNames(projectcss.all, sty.freeBox___9LuK, {
                [sty.freeBoxbackground_white___9LuKExKgD]: hasVariant(
                  $state,
                  "background",
                  "white"
                ),
                [sty.freeBoxjustification_center___9LuK0Cu5R]: hasVariant(
                  $state,
                  "justification",
                  "center"
                ),
                [sty.freeBoxorientation_left___9LuK0VeCm]: hasVariant(
                  $state,
                  "orientation",
                  "left"
                ),
                [sty.freeBoxorientation_top___9LuKojwIe]: hasVariant(
                  $state,
                  "orientation",
                  "top"
                ),
                [sty.freeBoxvariations__1___9LuKv4Jzo]: hasVariant(
                  $state,
                  "variations",
                  "_1"
                )
              })}
            >
              <div
                className={classNames(projectcss.all, sty.freeBox__doTll, {
                  [sty.freeBoxjustification_center__doTll0Cu5R]: hasVariant(
                    $state,
                    "justification",
                    "center"
                  ),
                  [sty.freeBoxjustification_justified__doTllg0SFz]: hasVariant(
                    $state,
                    "justification",
                    "justified"
                  ),
                  [sty.freeBoxjustification_left__doTll7KfzH]: hasVariant(
                    $state,
                    "justification",
                    "left"
                  ),
                  [sty.freeBoxjustification_right__doTllqYeHn]: hasVariant(
                    $state,
                    "justification",
                    "right"
                  ),
                  [sty.freeBoxorientation_left__doTll0VeCm]: hasVariant(
                    $state,
                    "orientation",
                    "left"
                  ),
                  [sty.freeBoxspacing_silmInnerRight__doTllnQc2Y]: hasVariant(
                    $state,
                    "spacing",
                    "silmInnerRight"
                  ),
                  [sty.freeBoxspacing_silmInnerUpper__doTllSm8]: hasVariant(
                    $state,
                    "spacing",
                    "silmInnerUpper"
                  ),
                  [sty.freeBoxspacing_slimInnerBottom__doTllHfi1E]: hasVariant(
                    $state,
                    "spacing",
                    "slimInnerBottom"
                  ),
                  [sty.freeBoxvariations__1__doTllv4Jzo]: hasVariant(
                    $state,
                    "variations",
                    "_1"
                  ),
                  [sty.freeBoxvariations__2__doTllRGy8]: hasVariant(
                    $state,
                    "variations",
                    "_2"
                  )
                })}
              >
                {p.renderPlasmicSlot({
                  defaultContents: "You won't believe what happens next.",
                  value: args.slot2
                })}
              </div>
              <div
                className={classNames(projectcss.all, sty.freeBox__n1TCu, {
                  [sty.freeBoxjustification_center__n1TCu0Cu5R]: hasVariant(
                    $state,
                    "justification",
                    "center"
                  ),
                  [sty.freeBoxspacing_silmInnerLeft__n1TCu7Dq2A]: hasVariant(
                    $state,
                    "spacing",
                    "silmInnerLeft"
                  ),
                  [sty.freeBoxvariations__1__n1TCuv4Jzo]: hasVariant(
                    $state,
                    "variations",
                    "_1"
                  )
                })}
              >
                <h1
                  data-plasmic-name={"heading4"}
                  data-plasmic-override={overrides.heading4}
                  className={classNames(
                    projectcss.all,
                    projectcss.h1,
                    sty.heading4,
                    {
                      [sty.heading4justification_center]: hasVariant(
                        $state,
                        "justification",
                        "center"
                      ),
                      [sty.heading4justification_justified]: hasVariant(
                        $state,
                        "justification",
                        "justified"
                      ),
                      [sty.heading4justification_left]: hasVariant(
                        $state,
                        "justification",
                        "left"
                      ),
                      [sty.heading4justification_right]: hasVariant(
                        $state,
                        "justification",
                        "right"
                      ),
                      [sty.heading4orientation_left]: hasVariant(
                        $state,
                        "orientation",
                        "left"
                      ),
                      [sty.heading4spacing_silmInnerRight]: hasVariant(
                        $state,
                        "spacing",
                        "silmInnerRight"
                      ),
                      [sty.heading4spacing_silmInnerUpper]: hasVariant(
                        $state,
                        "spacing",
                        "silmInnerUpper"
                      ),
                      [sty.heading4spacing_slimInnerBottom]: hasVariant(
                        $state,
                        "spacing",
                        "slimInnerBottom"
                      ),
                      [sty.heading4variations__1]: hasVariant(
                        $state,
                        "variations",
                        "_1"
                      ),
                      [sty.heading4variations__2]: hasVariant(
                        $state,
                        "variations",
                        "_2"
                      )
                    }
                  )}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox___4IYi, {
                      [sty.freeBoxjustification_center___4IYi0Cu5R]: hasVariant(
                        $state,
                        "justification",
                        "center"
                      ),
                      [sty.freeBoxjustification_justified___4IYig0SFz]:
                        hasVariant($state, "justification", "justified"),
                      [sty.freeBoxjustification_left___4IYi7KfzH]: hasVariant(
                        $state,
                        "justification",
                        "left"
                      ),
                      [sty.freeBoxjustification_right___4IYiqYeHn]: hasVariant(
                        $state,
                        "justification",
                        "right"
                      ),
                      [sty.freeBoxorientation_left___4IYi0VeCm]: hasVariant(
                        $state,
                        "orientation",
                        "left"
                      ),
                      [sty.freeBoxspacing_silmInnerRight___4IYinQc2Y]:
                        hasVariant($state, "spacing", "silmInnerRight"),
                      [sty.freeBoxspacing_silmInnerUpper___4IYiSm8]: hasVariant(
                        $state,
                        "spacing",
                        "silmInnerUpper"
                      ),
                      [sty.freeBoxspacing_slimInnerBottom___4IYiHfi1E]:
                        hasVariant($state, "spacing", "slimInnerBottom"),
                      [sty.freeBoxvariations__1___4IYiv4Jzo]: hasVariant(
                        $state,
                        "variations",
                        "_1"
                      ),
                      [sty.freeBoxvariations__2___4IYiRGy8]: hasVariant(
                        $state,
                        "variations",
                        "_2"
                      )
                    })}
                  >
                    {p.renderPlasmicSlot({
                      defaultContents: "You won't believe what happens next.",
                      value: args.slot3
                    })}
                  </div>
                </h1>
              </div>
              <div
                className={classNames(projectcss.all, sty.freeBox__yH8Vc, {
                  [sty.freeBoxjustification_center__yH8Vc0Cu5R]: hasVariant(
                    $state,
                    "justification",
                    "center"
                  ),
                  [sty.freeBoxvariations__1__yH8Vcv4Jzo]: hasVariant(
                    $state,
                    "variations",
                    "_1"
                  )
                })}
              >
                <div
                  data-plasmic-name={"content"}
                  data-plasmic-override={overrides.content}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.content,
                    {
                      [sty.contentjustification_center]: hasVariant(
                        $state,
                        "justification",
                        "center"
                      ),
                      [sty.contentjustification_justified]: hasVariant(
                        $state,
                        "justification",
                        "justified"
                      ),
                      [sty.contentjustification_left]: hasVariant(
                        $state,
                        "justification",
                        "left"
                      ),
                      [sty.contentjustification_right]: hasVariant(
                        $state,
                        "justification",
                        "right"
                      ),
                      [sty.contentspacing_silmInnerRight]: hasVariant(
                        $state,
                        "spacing",
                        "silmInnerRight"
                      ),
                      [sty.contentvariations__1]: hasVariant(
                        $state,
                        "variations",
                        "_1"
                      )
                    }
                  )}
                >
                  {
                    "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum."
                  }
                </div>
                <div
                  className={classNames(projectcss.all, sty.freeBox__umtxM, {
                    [sty.freeBoxvariations__1__umtxMv4Jzo]: hasVariant(
                      $state,
                      "variations",
                      "_1"
                    )
                  })}
                >
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__tHuUv, {
                      [sty.freeBoxjustification_center__tHuUv0Cu5R]: hasVariant(
                        $state,
                        "justification",
                        "center"
                      ),
                      [sty.freeBoxvariations__1__tHuUvv4Jzo]: hasVariant(
                        $state,
                        "variations",
                        "_1"
                      ),
                      [sty.freeBoxvariations__2__tHuUvRGy8]: hasVariant(
                        $state,
                        "variations",
                        "_2"
                      )
                    })}
                  >
                    <TextInput
                      data-plasmic-name={"textInput"}
                      data-plasmic-override={overrides.textInput}
                      className={classNames("__wab_instance", sty.textInput, {
                        [sty.textInputvariations__1]: hasVariant(
                          $state,
                          "variations",
                          "_1"
                        ),
                        [sty.textInputvariations__2]: hasVariant(
                          $state,
                          "variations",
                          "_2"
                        )
                      })}
                      onChange={(...eventArgs) => {
                        p.generateStateOnChangeProp($state, [
                          "textInput",
                          "value"
                        ])((e => e.target?.value).apply(null, eventArgs));
                      }}
                      value={
                        p.generateStateValueProp($state, [
                          "textInput",
                          "value"
                        ]) ?? ""
                      }
                    />

                    <p.Stack
                      as={"div"}
                      data-plasmic-name={"buttonGroup"}
                      data-plasmic-override={overrides.buttonGroup}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.buttonGroup, {
                        [sty.buttonGroupjustification_center]: hasVariant(
                          $state,
                          "justification",
                          "center"
                        ),
                        [sty.buttonGroupvariations__1]: hasVariant(
                          $state,
                          "variations",
                          "_1"
                        )
                      })}
                    >
                      <Button
                        data-plasmic-name={"primaryButton"}
                        data-plasmic-override={overrides.primaryButton}
                        className={classNames(
                          "__wab_instance",
                          sty.primaryButton,
                          {
                            [sty.primaryButtonvariations__1]: hasVariant(
                              $state,
                              "variations",
                              "_1"
                            )
                          }
                        )}
                      >
                        {"Button"}
                      </Button>
                      <Button
                        data-plasmic-name={"secondaryButton"}
                        data-plasmic-override={overrides.secondaryButton}
                        className={classNames(
                          "__wab_instance",
                          sty.secondaryButton,
                          {
                            [sty.secondaryButtonvariations__1]: hasVariant(
                              $state,
                              "variations",
                              "_1"
                            )
                          }
                        )}
                        color={undefined}
                      >
                        {"Button"}
                      </Button>
                      {false ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__gXrAh
                          )}
                        />
                      ) : null}
                    </p.Stack>
                  </p.Stack>
                  <div
                    data-plasmic-name={"text"}
                    data-plasmic-override={overrides.text}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text,
                      {
                        [sty.textjustification_center]: hasVariant(
                          $state,
                          "justification",
                          "center"
                        ),
                        [sty.textjustification_justified]: hasVariant(
                          $state,
                          "justification",
                          "justified"
                        ),
                        [sty.textjustification_left]: hasVariant(
                          $state,
                          "justification",
                          "left"
                        ),
                        [sty.textjustification_right]: hasVariant(
                          $state,
                          "justification",
                          "right"
                        ),
                        [sty.textvariations__1]: hasVariant(
                          $state,
                          "variations",
                          "_1"
                        ),
                        [sty.textvariations__2]: hasVariant(
                          $state,
                          "variations",
                          "_2"
                        )
                      }
                    )}
                  >
                    {
                      "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed"
                    }
                  </div>
                </div>
              </div>
            </div>
            {(
              hasVariant($state, "orientation", "left")
                ? true
                : hasVariant($state, "orientation", "top")
                ? true
                : false
            ) ? (
              <p.PlasmicImg
                data-plasmic-name={"img"}
                data-plasmic-override={overrides.img}
                alt={""}
                className={classNames(sty.img, {
                  [sty.imgorientation_left]: hasVariant(
                    $state,
                    "orientation",
                    "left"
                  ),
                  [sty.imgorientation_top]: hasVariant(
                    $state,
                    "orientation",
                    "top"
                  )
                })}
                displayHeight={"100%"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"100%"}
                loading={"lazy"}
              />
            ) : null}
          </div>
          <div
            className={classNames(projectcss.all, sty.column__z5S7F, {
              [sty.columnjustification_center__z5S7F0Cu5R]: hasVariant(
                $state,
                "justification",
                "center"
              ),
              [sty.columnorientation_top__z5S7FojwIe]: hasVariant(
                $state,
                "orientation",
                "top"
              ),
              [sty.columnphotoOption_unnamedVariant__z5S7FwjyY]: hasVariant(
                $state,
                "photoOption",
                "unnamedVariant"
              )
            })}
          >
            <div className={classNames(projectcss.all, sty.freeBox___64X7R)}>
              {p.renderPlasmicSlot({
                defaultContents: null,
                value: args.slot4
              })}
            </div>
            <div
              className={classNames(projectcss.all, sty.freeBox__lBxmN, {
                [sty.freeBoxphotoOption_unnamedVariant__lBxmNwjyY]: hasVariant(
                  $state,
                  "photoOption",
                  "unnamedVariant"
                )
              })}
            >
              {(hasVariant($state, "orientation", "left") ? false : true)
                ? p.renderPlasmicSlot({
                    defaultContents: (
                      <p.PlasmicImg
                        alt={""}
                        className={classNames(sty.img__tFoCf)}
                        displayHeight={"100%"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"100%"}
                        loading={"lazy"}
                      />
                    ),

                    value: args.children2
                  })
                : null}
            </div>
            <div
              className={classNames(projectcss.all, sty.freeBox__j8Ug, {
                [sty.freeBoxphotoOption_unnamedVariant__j8UGwjyY]: hasVariant(
                  $state,
                  "photoOption",
                  "unnamedVariant"
                )
              })}
            >
              {(hasVariant($state, "orientation", "left") ? false : true)
                ? p.renderPlasmicSlot({
                    defaultContents: (
                      <PhotoCollage
                        className={classNames(
                          "__wab_instance",
                          sty.photoCollage__xuUhb
                        )}
                        variations={"orientation"}
                      />
                    ),

                    value: args.children
                  })
                : null}
            </div>
          </div>
        </p.Stack>
      </p.Stack>
    </Section2>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "headerGroup",
    "heading4",
    "content",
    "textInput",
    "buttonGroup",
    "primaryButton",
    "secondaryButton",
    "text",
    "img"
  ],
  headerGroup: [
    "headerGroup",
    "heading4",
    "content",
    "textInput",
    "buttonGroup",
    "primaryButton",
    "secondaryButton",
    "text",
    "img"
  ],
  heading4: ["heading4"],
  content: ["content"],
  textInput: ["textInput"],
  buttonGroup: ["buttonGroup", "primaryButton", "secondaryButton"],
  primaryButton: ["primaryButton"],
  secondaryButton: ["secondaryButton"],
  text: ["text"],
  img: ["img"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: typeof Section2;
  headerGroup: "div";
  heading4: "h1";
  content: "div";
  textInput: typeof TextInput;
  buttonGroup: "div";
  primaryButton: typeof Button;
  secondaryButton: typeof Button;
  text: "div";
  img: typeof p.PlasmicImg;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHero__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHero__VariantsArgs;
    args?: PlasmicHero__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHero__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicHero__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHero__ArgProps,
          internalVariantPropNames: PlasmicHero__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHero__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHero";
  } else {
    func.displayName = `PlasmicHero.${nodeName}`;
  }
  return func;
}

export const PlasmicHero = Object.assign(
  // Top-level PlasmicHero renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    headerGroup: makeNodeComponent("headerGroup"),
    heading4: makeNodeComponent("heading4"),
    content: makeNodeComponent("content"),
    textInput: makeNodeComponent("textInput"),
    buttonGroup: makeNodeComponent("buttonGroup"),
    primaryButton: makeNodeComponent("primaryButton"),
    secondaryButton: makeNodeComponent("secondaryButton"),
    text: makeNodeComponent("text"),
    img: makeNodeComponent("img"),

    // Metadata about props expected for PlasmicHero
    internalVariantProps: PlasmicHero__VariantProps,
    internalArgProps: PlasmicHero__ArgProps
  }
);

export default PlasmicHero;
/* prettier-ignore-end */

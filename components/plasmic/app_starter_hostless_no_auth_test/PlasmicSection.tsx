// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: waVhN6sKC41JduCkjZHFuq
// Component: xLpqGPksn1wW

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_app_starter_hostless_no_auth_test.module.css"; // plasmic-import: waVhN6sKC41JduCkjZHFuq/projectcss
import sty from "./PlasmicSection.module.css"; // plasmic-import: xLpqGPksn1wW/css

createPlasmicElementProxy;

export type PlasmicSection__VariantMembers = {
  layer01BgColors:
    | "themeBaseLowest"
    | "themeBaseLower"
    | "themeBaseLow"
    | "themeBase"
    | "themeBaseHigh"
    | "themeBaseHigher"
    | "themeBaseHIghest"
    | "unnamedVariant"
    | "unnamedVariant2"
    | "unnamedVariant3"
    | "unnamedVariant4"
    | "unnamedVariant5"
    | "unnamedVariant6"
    | "unnamedVariant7"
    | "unnamedVariant8"
    | "unnamedVariant9"
    | "unnamedVariant10"
    | "unnamedVariant11"
    | "unnamedVariant12"
    | "unnamedVariant13"
    | "unnamedVariant14"
    | "unnamedVariant15"
    | "unnamedVariant16"
    | "unnamedVariant17"
    | "unnamedVariant18"
    | "unnamedVariant19"
    | "unnamedVariant20";
};
export type PlasmicSection__VariantsArgs = {
  layer01BgColors?: SingleChoiceArg<
    | "themeBaseLowest"
    | "themeBaseLower"
    | "themeBaseLow"
    | "themeBase"
    | "themeBaseHigh"
    | "themeBaseHigher"
    | "themeBaseHIghest"
    | "unnamedVariant"
    | "unnamedVariant2"
    | "unnamedVariant3"
    | "unnamedVariant4"
    | "unnamedVariant5"
    | "unnamedVariant6"
    | "unnamedVariant7"
    | "unnamedVariant8"
    | "unnamedVariant9"
    | "unnamedVariant10"
    | "unnamedVariant11"
    | "unnamedVariant12"
    | "unnamedVariant13"
    | "unnamedVariant14"
    | "unnamedVariant15"
    | "unnamedVariant16"
    | "unnamedVariant17"
    | "unnamedVariant18"
    | "unnamedVariant19"
    | "unnamedVariant20"
  >;
};
type VariantPropType = keyof PlasmicSection__VariantsArgs;
export const PlasmicSection__VariantProps = new Array<VariantPropType>(
  "layer01BgColors"
);

export type PlasmicSection__ArgsType = {
  featureChild?: React.ReactNode;
};
type ArgPropType = keyof PlasmicSection__ArgsType;
export const PlasmicSection__ArgProps = new Array<ArgPropType>("featureChild");

export type PlasmicSection__OverridesType = {
  feature?: p.Flex<"div">;
};

export interface DefaultSectionProps {
  featureChild?: React.ReactNode;
  layer01BgColors?: SingleChoiceArg<
    | "themeBaseLowest"
    | "themeBaseLower"
    | "themeBaseLow"
    | "themeBase"
    | "themeBaseHigh"
    | "themeBaseHigher"
    | "themeBaseHIghest"
    | "unnamedVariant"
    | "unnamedVariant2"
    | "unnamedVariant3"
    | "unnamedVariant4"
    | "unnamedVariant5"
    | "unnamedVariant6"
    | "unnamedVariant7"
    | "unnamedVariant8"
    | "unnamedVariant9"
    | "unnamedVariant10"
    | "unnamedVariant11"
    | "unnamedVariant12"
    | "unnamedVariant13"
    | "unnamedVariant14"
    | "unnamedVariant15"
    | "unnamedVariant16"
    | "unnamedVariant17"
    | "unnamedVariant18"
    | "unnamedVariant19"
    | "unnamedVariant20"
  >;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicSection__RenderFunc(props: {
  variants: PlasmicSection__VariantsArgs;
  args: PlasmicSection__ArgsType;
  overrides: PlasmicSection__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof p.useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "layer01BgColors",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.layer01BgColors
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = p.useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <div
      data-plasmic-name={"feature"}
      data-plasmic-override={overrides.feature}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.feature,
        {
          [sty.featurelayer01BgColors_themeBaseHIghest]: hasVariant(
            $state,
            "layer01BgColors",
            "themeBaseHIghest"
          ),
          [sty.featurelayer01BgColors_themeBaseHigh]: hasVariant(
            $state,
            "layer01BgColors",
            "themeBaseHigh"
          ),
          [sty.featurelayer01BgColors_themeBaseHigher]: hasVariant(
            $state,
            "layer01BgColors",
            "themeBaseHigher"
          ),
          [sty.featurelayer01BgColors_themeBaseLow]: hasVariant(
            $state,
            "layer01BgColors",
            "themeBaseLow"
          ),
          [sty.featurelayer01BgColors_themeBaseLower]: hasVariant(
            $state,
            "layer01BgColors",
            "themeBaseLower"
          ),
          [sty.featurelayer01BgColors_themeBaseLowest]: hasVariant(
            $state,
            "layer01BgColors",
            "themeBaseLowest"
          ),
          [sty.featurelayer01BgColors_themeBase]: hasVariant(
            $state,
            "layer01BgColors",
            "themeBase"
          ),
          [sty.featurelayer01BgColors_unnamedVariant10]: hasVariant(
            $state,
            "layer01BgColors",
            "unnamedVariant10"
          ),
          [sty.featurelayer01BgColors_unnamedVariant11]: hasVariant(
            $state,
            "layer01BgColors",
            "unnamedVariant11"
          ),
          [sty.featurelayer01BgColors_unnamedVariant12]: hasVariant(
            $state,
            "layer01BgColors",
            "unnamedVariant12"
          ),
          [sty.featurelayer01BgColors_unnamedVariant13]: hasVariant(
            $state,
            "layer01BgColors",
            "unnamedVariant13"
          ),
          [sty.featurelayer01BgColors_unnamedVariant14]: hasVariant(
            $state,
            "layer01BgColors",
            "unnamedVariant14"
          ),
          [sty.featurelayer01BgColors_unnamedVariant15]: hasVariant(
            $state,
            "layer01BgColors",
            "unnamedVariant15"
          ),
          [sty.featurelayer01BgColors_unnamedVariant16]: hasVariant(
            $state,
            "layer01BgColors",
            "unnamedVariant16"
          ),
          [sty.featurelayer01BgColors_unnamedVariant17]: hasVariant(
            $state,
            "layer01BgColors",
            "unnamedVariant17"
          ),
          [sty.featurelayer01BgColors_unnamedVariant18]: hasVariant(
            $state,
            "layer01BgColors",
            "unnamedVariant18"
          ),
          [sty.featurelayer01BgColors_unnamedVariant19]: hasVariant(
            $state,
            "layer01BgColors",
            "unnamedVariant19"
          ),
          [sty.featurelayer01BgColors_unnamedVariant20]: hasVariant(
            $state,
            "layer01BgColors",
            "unnamedVariant20"
          ),
          [sty.featurelayer01BgColors_unnamedVariant2]: hasVariant(
            $state,
            "layer01BgColors",
            "unnamedVariant2"
          ),
          [sty.featurelayer01BgColors_unnamedVariant3]: hasVariant(
            $state,
            "layer01BgColors",
            "unnamedVariant3"
          ),
          [sty.featurelayer01BgColors_unnamedVariant4]: hasVariant(
            $state,
            "layer01BgColors",
            "unnamedVariant4"
          ),
          [sty.featurelayer01BgColors_unnamedVariant5]: hasVariant(
            $state,
            "layer01BgColors",
            "unnamedVariant5"
          ),
          [sty.featurelayer01BgColors_unnamedVariant6]: hasVariant(
            $state,
            "layer01BgColors",
            "unnamedVariant6"
          ),
          [sty.featurelayer01BgColors_unnamedVariant7]: hasVariant(
            $state,
            "layer01BgColors",
            "unnamedVariant7"
          ),
          [sty.featurelayer01BgColors_unnamedVariant8]: hasVariant(
            $state,
            "layer01BgColors",
            "unnamedVariant8"
          ),
          [sty.featurelayer01BgColors_unnamedVariant9]: hasVariant(
            $state,
            "layer01BgColors",
            "unnamedVariant9"
          ),
          [sty.featurelayer01BgColors_unnamedVariant]: hasVariant(
            $state,
            "layer01BgColors",
            "unnamedVariant"
          )
        }
      )}
    >
      {p.renderPlasmicSlot({
        defaultContents: (
          <section className={classNames(projectcss.all, sty.section__uQnqp)} />
        ),

        value: args.featureChild
      })}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  feature: ["feature"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  feature: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSection__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSection__VariantsArgs;
    args?: PlasmicSection__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSection__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicSection__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSection__ArgProps,
          internalVariantPropNames: PlasmicSection__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSection__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "feature") {
    func.displayName = "PlasmicSection";
  } else {
    func.displayName = `PlasmicSection.${nodeName}`;
  }
  return func;
}

export const PlasmicSection = Object.assign(
  // Top-level PlasmicSection renders the root element
  makeNodeComponent("feature"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicSection
    internalVariantProps: PlasmicSection__VariantProps,
    internalArgProps: PlasmicSection__ArgProps
  }
);

export default PlasmicSection;
/* prettier-ignore-end */

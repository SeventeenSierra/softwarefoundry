// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: waVhN6sKC41JduCkjZHFuq
// Component: PEC5-llnbLr9

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_app_starter_hostless_no_auth_test.module.css"; // plasmic-import: waVhN6sKC41JduCkjZHFuq/projectcss
import sty from "./PlasmicSection2.module.css"; // plasmic-import: PEC5-llnbLr9/css

createPlasmicElementProxy;

export type PlasmicSection2__VariantMembers = {
  background: "dark" | "darkGray" | "lightGray";
  size:
    | "fullContentWidth"
    | "slimmerPadding"
    | "noPadding"
    | "noLeftSide"
    | "noRightSide"
    | "noTop"
    | "noBottom";
};
export type PlasmicSection2__VariantsArgs = {
  background?: SingleChoiceArg<"dark" | "darkGray" | "lightGray">;
  size?: MultiChoiceArg<
    | "fullContentWidth"
    | "slimmerPadding"
    | "noPadding"
    | "noLeftSide"
    | "noRightSide"
    | "noTop"
    | "noBottom"
  >;
};
type VariantPropType = keyof PlasmicSection2__VariantsArgs;
export const PlasmicSection2__VariantProps = new Array<VariantPropType>(
  "background",
  "size"
);

export type PlasmicSection2__ArgsType = {
  children?: React.ReactNode;
};
type ArgPropType = keyof PlasmicSection2__ArgsType;
export const PlasmicSection2__ArgProps = new Array<ArgPropType>("children");

export type PlasmicSection2__OverridesType = {
  root?: p.Flex<"div">;
  freeBox?: p.Flex<"div">;
};

export interface DefaultSection2Props {
  children?: React.ReactNode;
  background?: SingleChoiceArg<"dark" | "darkGray" | "lightGray">;
  size?: MultiChoiceArg<
    | "fullContentWidth"
    | "slimmerPadding"
    | "noPadding"
    | "noLeftSide"
    | "noRightSide"
    | "noTop"
    | "noBottom"
  >;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicSection2__RenderFunc(props: {
  variants: PlasmicSection2__VariantsArgs;
  args: PlasmicSection2__ArgsType;
  overrides: PlasmicSection2__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof p.useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "background",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.background
      },
      {
        path: "size",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.size
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = p.useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root,
        {
          [sty.rootbackground_darkGray]: hasVariant(
            $state,
            "background",
            "darkGray"
          ),
          [sty.rootbackground_dark]: hasVariant($state, "background", "dark"),
          [sty.rootbackground_lightGray]: hasVariant(
            $state,
            "background",
            "lightGray"
          ),
          [sty.rootsize_fullContentWidth]: hasVariant(
            $state,
            "size",
            "fullContentWidth"
          )
        }
      )}
    >
      <div
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        className={classNames(projectcss.all, sty.freeBox, {
          [sty.freeBoxbackground_dark]: hasVariant(
            $state,
            "background",
            "dark"
          ),
          [sty.freeBoxsize_fullContentWidth]: hasVariant(
            $state,
            "size",
            "fullContentWidth"
          ),
          [sty.freeBoxsize_noBottom]: hasVariant($state, "size", "noBottom"),
          [sty.freeBoxsize_noLeftSide]: hasVariant(
            $state,
            "size",
            "noLeftSide"
          ),
          [sty.freeBoxsize_noPadding]: hasVariant($state, "size", "noPadding"),
          [sty.freeBoxsize_noRightSide]: hasVariant(
            $state,
            "size",
            "noRightSide"
          ),
          [sty.freeBoxsize_noTop]: hasVariant($state, "size", "noTop"),
          [sty.freeBoxsize_slimmerPadding]: hasVariant(
            $state,
            "size",
            "slimmerPadding"
          )
        })}
      >
        {p.renderPlasmicSlot({
          defaultContents: null,
          value: args.children
        })}
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "freeBox"],
  freeBox: ["freeBox"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  freeBox: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSection2__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSection2__VariantsArgs;
    args?: PlasmicSection2__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSection2__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicSection2__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSection2__ArgProps,
          internalVariantPropNames: PlasmicSection2__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSection2__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSection2";
  } else {
    func.displayName = `PlasmicSection2.${nodeName}`;
  }
  return func;
}

export const PlasmicSection2 = Object.assign(
  // Top-level PlasmicSection2 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),

    // Metadata about props expected for PlasmicSection2
    internalVariantProps: PlasmicSection2__VariantProps,
    internalArgProps: PlasmicSection2__ArgProps
  }
);

export default PlasmicSection2;
/* prettier-ignore-end */

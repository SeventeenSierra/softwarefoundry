// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: waVhN6sKC41JduCkjZHFuq
// Component: LonK8nvpAwB6

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Button from "../../Button"; // plasmic-import: XVnqJFFWe0Ng/component
import Divider from "../../Divider"; // plasmic-import: Du88i3nQSt0b/component
import Checkbox from "../../Checkbox"; // plasmic-import: G4aXVijMkSGJ/component

import { useScreenVariants as useScreenVariantsogPeTNssmuP2 } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: OGPeTNssmuP2/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_app_starter_hostless_no_auth_test.module.css"; // plasmic-import: waVhN6sKC41JduCkjZHFuq/projectcss
import sty from "./PlasmicNextJsStarter.module.css"; // plasmic-import: LonK8nvpAwB6/css

import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: oo3GFQUuqF3Z/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: dxj71VlIakcj/icon

createPlasmicElementProxy;

export type PlasmicNextJsStarter__VariantMembers = {};
export type PlasmicNextJsStarter__VariantsArgs = {};
type VariantPropType = keyof PlasmicNextJsStarter__VariantsArgs;
export const PlasmicNextJsStarter__VariantProps = new Array<VariantPropType>();

export type PlasmicNextJsStarter__ArgsType = {};
type ArgPropType = keyof PlasmicNextJsStarter__ArgsType;
export const PlasmicNextJsStarter__ArgProps = new Array<ArgPropType>();

export type PlasmicNextJsStarter__OverridesType = {
  root?: p.Flex<"div">;
  checkbox?: p.Flex<typeof Checkbox>;
  checkbox2?: p.Flex<typeof Checkbox>;
  checkbox3?: p.Flex<typeof Checkbox>;
  checkbox4?: p.Flex<typeof Checkbox>;
  columns?: p.Flex<"div">;
  column?: p.Flex<"div">;
};

export interface DefaultNextJsStarterProps {
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicNextJsStarter__RenderFunc(props: {
  variants: PlasmicNextJsStarter__VariantsArgs;
  args: PlasmicNextJsStarter__ArgsType;
  overrides: PlasmicNextJsStarter__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof p.useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "checkbox.isChecked",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "checkbox2.isChecked",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "checkbox3.isChecked",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "checkbox4.isChecked",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = p.useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsogPeTNssmuP2()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__mkL25)}
      >
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__ffTn4)}
        >
          <Button
            className={classNames("__wab_instance", sty.button__j5C2P)}
            color={undefined}
          >
            {"Deploy to Vercel"}
          </Button>
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__njV7G)}
          >
            <Button
              className={classNames("__wab_instance", sty.button__nVrtz)}
              endIcon={
                <IconIcon
                  className={classNames(projectcss.all, sty.svg__rKGnr)}
                  role={"img"}
                />
              }
              startIcon={
                <ChecksvgIcon
                  className={classNames(projectcss.all, sty.svg__jgFtI)}
                  role={"img"}
                />
              }
              submitsForm={true}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___5VRnm
                )}
              >
                {"Login"}
              </div>
            </Button>
          </p.Stack>
        </p.Stack>
      </p.Stack>
      <Divider className={classNames("__wab_instance", sty.divider__gpauW)} />

      <section className={classNames(projectcss.all, sty.section__qfBsr)}>
        <h1
          className={classNames(
            projectcss.all,
            projectcss.h1,
            projectcss.__wab_text,
            sty.h1__rbzd0
          )}
        >
          {"supabase / NEXT.JS"}
        </h1>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__iunNj
          )}
        >
          <React.Fragment>
            <React.Fragment>
              {"The fastest way to build apps with "}
            </React.Fragment>
            <span
              className={"plasmic_default__all plasmic_default__span"}
              style={{ fontWeight: 700 }}
            >
              {"Supabase"}
            </span>
            <React.Fragment>{" and "}</React.Fragment>
            <span
              className={"plasmic_default__all plasmic_default__span"}
              style={{ fontWeight: 700 }}
            >
              {"Next.js"}
            </span>
          </React.Fragment>
        </div>
      </section>
      <Divider className={classNames("__wab_instance", sty.divider__bhR8Y)} />

      <section className={classNames(projectcss.all, sty.section__aalgS)}>
        <h1
          className={classNames(
            projectcss.all,
            projectcss.h1,
            projectcss.__wab_text,
            sty.h1__avjY1
          )}
        >
          {"Next steps"}
        </h1>
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__eAVx)}
        >
          <div className={classNames(projectcss.all, sty.freeBox___4KNsL)}>
            <Checkbox
              data-plasmic-name={"checkbox"}
              data-plasmic-override={overrides.checkbox}
              className={classNames("__wab_instance", sty.checkbox)}
              isChecked={
                p.generateStateValueProp($state, ["checkbox", "isChecked"]) ??
                false
              }
              onChange={(...eventArgs) => {
                p.generateStateOnChangeProp($state, ["checkbox", "isChecked"])(
                  eventArgs[0]
                );
              }}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__rv8SB
                )}
              >
                <React.Fragment>
                  <span
                    className={"plasmic_default__all plasmic_default__span"}
                    style={{ fontWeight: 700 }}
                  >
                    {"Sign up your first user"}
                  </span>
                </React.Fragment>
              </div>
            </Checkbox>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__qeXzf
              )}
            >
              {
                "Head over to the Login page and sign up your first user. It's okay if this is just you for now. Your awesome idea will have plenty of users later!"
              }
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__tSjX3)}>
            <Checkbox
              data-plasmic-name={"checkbox2"}
              data-plasmic-override={overrides.checkbox2}
              className={classNames("__wab_instance", sty.checkbox2)}
              isChecked={
                p.generateStateValueProp($state, ["checkbox2", "isChecked"]) ??
                false
              }
              onChange={(...eventArgs) => {
                p.generateStateOnChangeProp($state, ["checkbox2", "isChecked"])(
                  eventArgs[0]
                );
              }}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__fg9Tp
                )}
              >
                <React.Fragment>
                  <span
                    className={"plasmic_default__all plasmic_default__span"}
                    style={{ fontWeight: 700 }}
                  >
                    {"Create some tables and insert some data"}
                  </span>
                </React.Fragment>
              </div>
            </Checkbox>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___1IbN
              )}
            >
              {
                "Head over to the Login page and sign up your first user. It's okay if this is just you for now. Your awesome idea will have plenty of users later!"
              }
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__epDfe)} />
          </div>
          <div className={classNames(projectcss.all, sty.freeBox___8YtDy)}>
            <Checkbox
              data-plasmic-name={"checkbox3"}
              data-plasmic-override={overrides.checkbox3}
              className={classNames("__wab_instance", sty.checkbox3)}
              isChecked={
                p.generateStateValueProp($state, ["checkbox3", "isChecked"]) ??
                false
              }
              onChange={(...eventArgs) => {
                p.generateStateOnChangeProp($state, ["checkbox3", "isChecked"])(
                  eventArgs[0]
                );
              }}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___1QVn0
                )}
              >
                <React.Fragment>
                  <span
                    className={"plasmic_default__all plasmic_default__span"}
                    style={{ fontWeight: 700 }}
                  >
                    {"Query Supabase data from Next.js"}
                  </span>
                </React.Fragment>
              </div>
            </Checkbox>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__rf0
              )}
            >
              {
                "To create a Supabase client and query data from an Async Server Component, create a new page.tsx file at /app/notes/page.tsx and add the following."
              }
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__ydYu)} />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__qphVx
              )}
            >
              {"Alternatively, you can use a Client Component."}
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__c3MXh)} />
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__zFhUu)}>
            <Checkbox
              data-plasmic-name={"checkbox4"}
              data-plasmic-override={overrides.checkbox4}
              className={classNames("__wab_instance", sty.checkbox4)}
              isChecked={
                p.generateStateValueProp($state, ["checkbox4", "isChecked"]) ??
                false
              }
              onChange={(...eventArgs) => {
                p.generateStateOnChangeProp($state, ["checkbox4", "isChecked"])(
                  eventArgs[0]
                );
              }}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__ruUIx
                )}
              >
                <React.Fragment>
                  <span
                    className={"plasmic_default__all plasmic_default__span"}
                    style={{ fontWeight: 700 }}
                  >
                    {"Build in a weekend and scale to millions!"}
                  </span>
                </React.Fragment>
              </div>
            </Checkbox>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__hSF5
              )}
            >
              {
                "Head over to the Login page and sign up your first user. It's okay if this is just you for now. Your awesome idea will have plenty of users later!"
              }
            </div>
          </div>
        </p.Stack>
      </section>
      <Divider className={classNames("__wab_instance", sty.divider__un6Be)} />

      <div className={classNames(projectcss.all, sty.freeBox__hmfZv)}>
        <p.Stack
          as={"div"}
          data-plasmic-name={"columns"}
          data-plasmic-override={overrides.columns}
          hasGap={true}
          className={classNames(projectcss.all, sty.columns)}
        >
          <div
            data-plasmic-name={"column"}
            data-plasmic-override={overrides.column}
            className={classNames(projectcss.all, sty.column)}
          >
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__pc4Cx)}
            >
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__sGkiO)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__s9Vp
                  )}
                >
                  {"Powered by Supabase"}
                </div>
              </p.Stack>
            </p.Stack>
          </div>
        </p.Stack>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "checkbox",
    "checkbox2",
    "checkbox3",
    "checkbox4",
    "columns",
    "column"
  ],
  checkbox: ["checkbox"],
  checkbox2: ["checkbox2"],
  checkbox3: ["checkbox3"],
  checkbox4: ["checkbox4"],
  columns: ["columns", "column"],
  column: ["column"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  checkbox: typeof Checkbox;
  checkbox2: typeof Checkbox;
  checkbox3: typeof Checkbox;
  checkbox4: typeof Checkbox;
  columns: "div";
  column: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicNextJsStarter__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicNextJsStarter__VariantsArgs;
    args?: PlasmicNextJsStarter__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicNextJsStarter__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicNextJsStarter__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicNextJsStarter__ArgProps,
          internalVariantPropNames: PlasmicNextJsStarter__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicNextJsStarter__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicNextJsStarter";
  } else {
    func.displayName = `PlasmicNextJsStarter.${nodeName}`;
  }
  return func;
}

export const PlasmicNextJsStarter = Object.assign(
  // Top-level PlasmicNextJsStarter renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    checkbox: makeNodeComponent("checkbox"),
    checkbox2: makeNodeComponent("checkbox2"),
    checkbox3: makeNodeComponent("checkbox3"),
    checkbox4: makeNodeComponent("checkbox4"),
    columns: makeNodeComponent("columns"),
    column: makeNodeComponent("column"),

    // Metadata about props expected for PlasmicNextJsStarter
    internalVariantProps: PlasmicNextJsStarter__VariantProps,
    internalArgProps: PlasmicNextJsStarter__ArgProps
  }
);

export default PlasmicNextJsStarter;
/* prettier-ignore-end */

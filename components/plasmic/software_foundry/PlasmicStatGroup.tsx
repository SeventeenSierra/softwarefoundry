// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: gqxPS4AgvrvZFiLQ3PbJ65
// Component: hONZ2MGB7n8c

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Statistic from "../../Statistic"; // plasmic-import: bEDFqLeOb3k4/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_app_starter_hostless_no_auth_test_css from "../app_starter_hostless_no_auth_test/plasmic_app_starter_hostless_no_auth_test.module.css"; // plasmic-import: waVhN6sKC41JduCkjZHFuq/projectcss
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic_software_foundry.module.css"; // plasmic-import: gqxPS4AgvrvZFiLQ3PbJ65/projectcss
import sty from "./PlasmicStatGroup.module.css"; // plasmic-import: hONZ2MGB7n8c/css

createPlasmicElementProxy;

export type PlasmicStatGroup__VariantMembers = {
  shape2: "single" | "double" | "pyramid" | "triangle" | "square";
};
export type PlasmicStatGroup__VariantsArgs = {
  shape2?: SingleChoiceArg<
    "single" | "double" | "pyramid" | "triangle" | "square"
  >;
};
type VariantPropType = keyof PlasmicStatGroup__VariantsArgs;
export const PlasmicStatGroup__VariantProps = new Array<VariantPropType>(
  "shape2"
);

export type PlasmicStatGroup__ArgsType = {
  midTopStat7?: React.ReactNode;
  midTopStat8?: React.ReactNode;
  midTopStat9?: React.ReactNode;
  leftMidBottomStat5?: React.ReactNode;
  rightMidBottomStat5?: React.ReactNode;
  rightMidBottomStat9?: React.ReactNode;
  midTopStat10?: React.ReactNode;
  midTopStat11?: React.ReactNode;
  midTopStat12?: React.ReactNode;
};
type ArgPropType = keyof PlasmicStatGroup__ArgsType;
export const PlasmicStatGroup__ArgProps = new Array<ArgPropType>(
  "midTopStat7",
  "midTopStat8",
  "midTopStat9",
  "leftMidBottomStat5",
  "rightMidBottomStat5",
  "rightMidBottomStat9",
  "midTopStat10",
  "midTopStat11",
  "midTopStat12"
);

export type PlasmicStatGroup__OverridesType = {
  middleStatGroup4?: p.Flex<"div">;
  bottomMidStatGroup4?: p.Flex<"div">;
};

export interface DefaultStatGroupProps {
  midTopStat7?: React.ReactNode;
  midTopStat8?: React.ReactNode;
  midTopStat9?: React.ReactNode;
  leftMidBottomStat5?: React.ReactNode;
  rightMidBottomStat5?: React.ReactNode;
  rightMidBottomStat9?: React.ReactNode;
  midTopStat10?: React.ReactNode;
  midTopStat11?: React.ReactNode;
  midTopStat12?: React.ReactNode;
  shape2?: SingleChoiceArg<
    "single" | "double" | "pyramid" | "triangle" | "square"
  >;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicStatGroup__RenderFunc(props: {
  variants: PlasmicStatGroup__VariantsArgs;
  args: PlasmicStatGroup__ArgsType;
  overrides: PlasmicStatGroup__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof p.useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "shape2",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.shape2
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = p.useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"middleStatGroup4"}
      data-plasmic-override={overrides.middleStatGroup4}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_app_starter_hostless_no_auth_test_css.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.middleStatGroup4,
        {
          [sty.middleStatGroup4shape2_double]: hasVariant(
            $state,
            "shape2",
            "double"
          ),
          [sty.middleStatGroup4shape2_pyramid]: hasVariant(
            $state,
            "shape2",
            "pyramid"
          ),
          [sty.middleStatGroup4shape2_single]: hasVariant(
            $state,
            "shape2",
            "single"
          ),
          [sty.middleStatGroup4shape2_square]: hasVariant(
            $state,
            "shape2",
            "square"
          ),
          [sty.middleStatGroup4shape2_triangle]: hasVariant(
            $state,
            "shape2",
            "triangle"
          )
        }
      )}
    >
      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__mfBDj)}
      >
        {(
          hasVariant($state, "shape2", "triangle")
            ? false
            : hasVariant($state, "shape2", "pyramid")
            ? false
            : hasVariant($state, "shape2", "double")
            ? false
            : hasVariant($state, "shape2", "single")
            ? false
            : true
        )
          ? p.renderPlasmicSlot({
              defaultContents: (
                <Statistic
                  className={classNames("__wab_instance", sty.statistic__c0R9R)}
                  number={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___4Domw
                      )}
                    >
                      {"0"}
                    </div>
                  }
                  unit={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__eVyrG
                      )}
                    >
                      <React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ fontWeight: 700 }}
                        >
                          {"Stat Title"}
                        </span>
                      </React.Fragment>
                    </div>
                  }
                />
              ),

              value: args.midTopStat7
            })
          : null}
        {(
          hasVariant($state, "shape2", "square")
            ? false
            : hasVariant($state, "shape2", "triangle")
            ? false
            : hasVariant($state, "shape2", "pyramid")
            ? false
            : hasVariant($state, "shape2", "double")
            ? false
            : hasVariant($state, "shape2", "single")
            ? false
            : true
        )
          ? p.renderPlasmicSlot({
              defaultContents: (
                <Statistic
                  className={classNames("__wab_instance", sty.statistic__dVePl)}
                  number={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__tc6GH
                      )}
                    >
                      {"0"}
                    </div>
                  }
                  unit={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___6N
                      )}
                    >
                      <React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ fontWeight: 700 }}
                        >
                          {"Stat Title"}
                        </span>
                      </React.Fragment>
                    </div>
                  }
                />
              ),

              value: args.midTopStat8
            })
          : null}
        {(
          hasVariant($state, "shape2", "square")
            ? false
            : hasVariant($state, "shape2", "triangle")
            ? false
            : hasVariant($state, "shape2", "pyramid")
            ? false
            : hasVariant($state, "shape2", "double")
            ? false
            : hasVariant($state, "shape2", "single")
            ? false
            : true
        )
          ? p.renderPlasmicSlot({
              defaultContents: (
                <Statistic
                  className={classNames("__wab_instance", sty.statistic__boVy2)}
                  number={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__nWJfC
                      )}
                    >
                      {"0"}
                    </div>
                  }
                  unit={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__nzS
                      )}
                    >
                      <React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ fontWeight: 700 }}
                        >
                          {"Stat Title"}
                        </span>
                      </React.Fragment>
                    </div>
                  }
                />
              ),

              value: args.midTopStat9
            })
          : null}
      </p.Stack>
      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox___0Hy3A, {
          [sty.freeBoxshape2_square___0Hy3ABJeS]: hasVariant(
            $state,
            "shape2",
            "square"
          )
        })}
      >
        {(
          hasVariant($state, "shape2", "triangle")
            ? false
            : hasVariant($state, "shape2", "pyramid")
            ? false
            : hasVariant($state, "shape2", "double")
            ? false
            : hasVariant($state, "shape2", "single")
            ? false
            : true
        )
          ? p.renderPlasmicSlot({
              defaultContents: (
                <Statistic
                  className={classNames("__wab_instance", sty.statistic__hnWYt)}
                  number={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__rTvCu
                      )}
                    >
                      {"0"}
                    </div>
                  }
                  unit={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__co2Q7
                      )}
                    >
                      <React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ fontWeight: 700 }}
                        >
                          {"Stat Title"}
                        </span>
                      </React.Fragment>
                    </div>
                  }
                />
              ),

              value: args.midTopStat10
            })
          : null}
        {(hasVariant($state, "shape2", "square") ? false : true)
          ? p.renderPlasmicSlot({
              defaultContents: (
                <Statistic
                  className={classNames(
                    "__wab_instance",
                    sty.statistic___2FlXy
                  )}
                  number={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__nMdA
                      )}
                    >
                      {"0"}
                    </div>
                  }
                  unit={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___4Jshq
                      )}
                    >
                      <React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ fontWeight: 700 }}
                        >
                          {"Stat Title"}
                        </span>
                      </React.Fragment>
                    </div>
                  }
                />
              ),

              value: args.midTopStat11
            })
          : null}
        {(
          hasVariant($state, "shape2", "triangle")
            ? false
            : hasVariant($state, "shape2", "pyramid")
            ? false
            : hasVariant($state, "shape2", "double")
            ? false
            : hasVariant($state, "shape2", "single")
            ? false
            : true
        )
          ? p.renderPlasmicSlot({
              defaultContents: (
                <Statistic
                  className={classNames(
                    "__wab_instance",
                    sty.statistic___8RbVh
                  )}
                  number={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___2JyaF
                      )}
                    >
                      {"0"}
                    </div>
                  }
                  unit={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__sgAd
                      )}
                    >
                      <React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ fontWeight: 700 }}
                        >
                          {"Stat Title"}
                        </span>
                      </React.Fragment>
                    </div>
                  }
                />
              ),

              value: args.midTopStat12
            })
          : null}
      </p.Stack>
      <p.Stack
        as={"div"}
        data-plasmic-name={"bottomMidStatGroup4"}
        data-plasmic-override={overrides.bottomMidStatGroup4}
        hasGap={true}
        className={classNames(projectcss.all, sty.bottomMidStatGroup4)}
      >
        {(
          hasVariant($state, "shape2", "double")
            ? false
            : hasVariant($state, "shape2", "single")
            ? false
            : true
        )
          ? p.renderPlasmicSlot({
              defaultContents: (
                <Statistic
                  className={classNames("__wab_instance", sty.statistic__eIv2B)}
                  number={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___7CfJ1
                      )}
                    >
                      {"0"}
                    </div>
                  }
                  unit={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__wwgPk
                      )}
                    >
                      {"Stat Title"}
                    </div>
                  }
                />
              ),

              value: args.leftMidBottomStat5
            })
          : null}
        {(
          hasVariant($state, "shape2", "square")
            ? false
            : hasVariant($state, "shape2", "triangle")
            ? false
            : hasVariant($state, "shape2", "single")
            ? false
            : true
        )
          ? p.renderPlasmicSlot({
              defaultContents: (
                <Statistic
                  className={classNames("__wab_instance", sty.statistic__s8YRr)}
                  number={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___7EKlR
                      )}
                    >
                      {"0"}
                    </div>
                  }
                  unit={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__c7JvZ
                      )}
                    >
                      <React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ fontWeight: 700 }}
                        >
                          {"Stat Title"}
                        </span>
                      </React.Fragment>
                    </div>
                  }
                />
              ),

              value: args.rightMidBottomStat5
            })
          : null}
        {(
          hasVariant($state, "shape2", "double")
            ? false
            : hasVariant($state, "shape2", "single")
            ? false
            : true
        )
          ? p.renderPlasmicSlot({
              defaultContents: (
                <Statistic
                  className={classNames("__wab_instance", sty.statistic__rSuj5)}
                  number={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__raT9P
                      )}
                    >
                      {"0"}
                    </div>
                  }
                  unit={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__xgd8M
                      )}
                    >
                      <React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ fontWeight: 700 }}
                        >
                          {"Stat Title"}
                        </span>
                      </React.Fragment>
                    </div>
                  }
                />
              ),

              value: args.rightMidBottomStat9
            })
          : null}
      </p.Stack>
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  middleStatGroup4: ["middleStatGroup4", "bottomMidStatGroup4"],
  bottomMidStatGroup4: ["bottomMidStatGroup4"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  middleStatGroup4: "div";
  bottomMidStatGroup4: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicStatGroup__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicStatGroup__VariantsArgs;
    args?: PlasmicStatGroup__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicStatGroup__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicStatGroup__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicStatGroup__ArgProps,
          internalVariantPropNames: PlasmicStatGroup__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicStatGroup__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "middleStatGroup4") {
    func.displayName = "PlasmicStatGroup";
  } else {
    func.displayName = `PlasmicStatGroup.${nodeName}`;
  }
  return func;
}

export const PlasmicStatGroup = Object.assign(
  // Top-level PlasmicStatGroup renders the root element
  makeNodeComponent("middleStatGroup4"),
  {
    // Helper components rendering sub-elements
    bottomMidStatGroup4: makeNodeComponent("bottomMidStatGroup4"),

    // Metadata about props expected for PlasmicStatGroup
    internalVariantProps: PlasmicStatGroup__VariantProps,
    internalArgProps: PlasmicStatGroup__ArgProps
  }
);

export default PlasmicStatGroup;
/* prettier-ignore-end */

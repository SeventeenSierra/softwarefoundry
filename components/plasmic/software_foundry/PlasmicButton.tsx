// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: gqxPS4AgvrvZFiLQ3PbJ65
// Component: 3WK9FRVCXJcs

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import * as pp from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_app_starter_hostless_no_auth_test_css from "../app_starter_hostless_no_auth_test/plasmic_app_starter_hostless_no_auth_test.module.css"; // plasmic-import: waVhN6sKC41JduCkjZHFuq/projectcss
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic_software_foundry.module.css"; // plasmic-import: gqxPS4AgvrvZFiLQ3PbJ65/projectcss
import sty from "./PlasmicButton.module.css"; // plasmic-import: 3WK9FRVCXJcs/css

import IconmonstrRefresh1SvgIcon from "./icons/PlasmicIcon__IconmonstrRefresh1Svg"; // plasmic-import: WhpeF1cGeUrK/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: QI7Bkirsjidh/icon

createPlasmicElementProxy;

export type PlasmicButton__VariantMembers = {
  showStartIcon: "showStartIcon";
  showEndIcon: "showEndIcon";
  isDisabled: "isDisabled";
  shape: "rounded" | "round" | "sharp";
  size: "compact" | "minimal" | "huge" | "tiny";
  color:
    | "clear"
    | "white"
    | "link"
    | "disabled"
    | "primaryLow"
    | "primary"
    | "primaryHigh"
    | "secondaryLow"
    | "secondary"
    | "secondaryHigh"
    | "coolAccentLow"
    | "coolAccent"
    | "coolAccentHigh"
    | "warmAccentLow"
    | "warmAccent"
    | "warmAccentHigh"
    | "infoLow"
    | "info"
    | "infoHigh"
    | "successLow"
    | "success"
    | "successHigh"
    | "warningLow"
    | "warning"
    | "warningHigh"
    | "errorLow"
    | "error"
    | "errorHigh";
  iconOnly: "iconOnly";
  unnamedVariant: "unnamedVariant";
};
export type PlasmicButton__VariantsArgs = {
  showStartIcon?: SingleBooleanChoiceArg<"showStartIcon">;
  showEndIcon?: SingleBooleanChoiceArg<"showEndIcon">;
  isDisabled?: SingleBooleanChoiceArg<"isDisabled">;
  shape?: SingleChoiceArg<"rounded" | "round" | "sharp">;
  size?: SingleChoiceArg<"compact" | "minimal" | "huge" | "tiny">;
  color?: SingleChoiceArg<
    | "clear"
    | "white"
    | "link"
    | "disabled"
    | "primaryLow"
    | "primary"
    | "primaryHigh"
    | "secondaryLow"
    | "secondary"
    | "secondaryHigh"
    | "coolAccentLow"
    | "coolAccent"
    | "coolAccentHigh"
    | "warmAccentLow"
    | "warmAccent"
    | "warmAccentHigh"
    | "infoLow"
    | "info"
    | "infoHigh"
    | "successLow"
    | "success"
    | "successHigh"
    | "warningLow"
    | "warning"
    | "warningHigh"
    | "errorLow"
    | "error"
    | "errorHigh"
  >;
  iconOnly?: SingleBooleanChoiceArg<"iconOnly">;
  unnamedVariant?: SingleBooleanChoiceArg<"unnamedVariant">;
};
type VariantPropType = keyof PlasmicButton__VariantsArgs;
export const PlasmicButton__VariantProps = new Array<VariantPropType>(
  "showStartIcon",
  "showEndIcon",
  "isDisabled",
  "shape",
  "size",
  "color",
  "iconOnly",
  "unnamedVariant"
);

export type PlasmicButton__ArgsType = {
  children?: React.ReactNode;
  startIcon?: React.ReactNode;
  endIcon?: React.ReactNode;
  link?: string;
  submitsForm?: boolean;
  target?: boolean;
};
type ArgPropType = keyof PlasmicButton__ArgsType;
export const PlasmicButton__ArgProps = new Array<ArgPropType>(
  "children",
  "startIcon",
  "endIcon",
  "link",
  "submitsForm",
  "target"
);

export type PlasmicButton__OverridesType = {
  root?: p.Flex<"button">;
  startIconContainer?: p.Flex<"div">;
  contentContainer?: p.Flex<"div">;
  endIconContainer?: p.Flex<"div">;
};

export interface DefaultButtonProps extends pp.BaseButtonProps {
  submitsForm?: boolean;
  target?: boolean;
  shape?: SingleChoiceArg<"rounded" | "round" | "sharp">;
  size?: SingleChoiceArg<"compact" | "minimal" | "huge" | "tiny">;
  color?: SingleChoiceArg<
    | "clear"
    | "white"
    | "link"
    | "disabled"
    | "primaryLow"
    | "primary"
    | "primaryHigh"
    | "secondaryLow"
    | "secondary"
    | "secondaryHigh"
    | "coolAccentLow"
    | "coolAccent"
    | "coolAccentHigh"
    | "warmAccentLow"
    | "warmAccent"
    | "warmAccentHigh"
    | "infoLow"
    | "info"
    | "infoHigh"
    | "successLow"
    | "success"
    | "successHigh"
    | "warningLow"
    | "warning"
    | "warningHigh"
    | "errorLow"
    | "error"
    | "errorHigh"
  >;
  iconOnly?: SingleBooleanChoiceArg<"iconOnly">;
  unnamedVariant?: SingleBooleanChoiceArg<"unnamedVariant">;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicButton__RenderFunc(props: {
  variants: PlasmicButton__VariantsArgs;
  args: PlasmicButton__ArgsType;
  overrides: PlasmicButton__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof p.useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "showStartIcon",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.showStartIcon
      },
      {
        path: "showEndIcon",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.showEndIcon
      },
      {
        path: "isDisabled",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.isDisabled
      },
      {
        path: "shape",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.shape
      },
      {
        path: "size",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.size
      },
      {
        path: "color",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.color
      },
      {
        path: "iconOnly",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.iconOnly
      },
      {
        path: "unnamedVariant",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.unnamedVariant
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = p.useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <p.Stack
      as={"button"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.button,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_app_starter_hostless_no_auth_test_css.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.root,
        {
          [sty.rootcolor_clear]: hasVariant($state, "color", "clear"),
          [sty.rootcolor_coolAccentHigh]: hasVariant(
            $state,
            "color",
            "coolAccentHigh"
          ),
          [sty.rootcolor_coolAccentLow]: hasVariant(
            $state,
            "color",
            "coolAccentLow"
          ),
          [sty.rootcolor_coolAccent]: hasVariant($state, "color", "coolAccent"),
          [sty.rootcolor_disabled]: hasVariant($state, "color", "disabled"),
          [sty.rootcolor_errorHigh]: hasVariant($state, "color", "errorHigh"),
          [sty.rootcolor_errorLow]: hasVariant($state, "color", "errorLow"),
          [sty.rootcolor_error]: hasVariant($state, "color", "error"),
          [sty.rootcolor_infoHigh]: hasVariant($state, "color", "infoHigh"),
          [sty.rootcolor_infoLow]: hasVariant($state, "color", "infoLow"),
          [sty.rootcolor_info]: hasVariant($state, "color", "info"),
          [sty.rootcolor_link]: hasVariant($state, "color", "link"),
          [sty.rootcolor_link_size_minimal]:
            hasVariant($state, "color", "link") &&
            hasVariant($state, "size", "minimal"),
          [sty.rootcolor_primaryHigh]: hasVariant(
            $state,
            "color",
            "primaryHigh"
          ),
          [sty.rootcolor_primaryLow]: hasVariant($state, "color", "primaryLow"),
          [sty.rootcolor_primary]: hasVariant($state, "color", "primary"),
          [sty.rootcolor_secondaryHigh]: hasVariant(
            $state,
            "color",
            "secondaryHigh"
          ),
          [sty.rootcolor_secondaryLow]: hasVariant(
            $state,
            "color",
            "secondaryLow"
          ),
          [sty.rootcolor_secondary]: hasVariant($state, "color", "secondary"),
          [sty.rootcolor_successHigh]: hasVariant(
            $state,
            "color",
            "successHigh"
          ),
          [sty.rootcolor_successLow]: hasVariant($state, "color", "successLow"),
          [sty.rootcolor_success]: hasVariant($state, "color", "success"),
          [sty.rootcolor_warmAccentHigh]: hasVariant(
            $state,
            "color",
            "warmAccentHigh"
          ),
          [sty.rootcolor_warmAccentLow]: hasVariant(
            $state,
            "color",
            "warmAccentLow"
          ),
          [sty.rootcolor_warmAccent]: hasVariant($state, "color", "warmAccent"),
          [sty.rootcolor_warningHigh]: hasVariant(
            $state,
            "color",
            "warningHigh"
          ),
          [sty.rootcolor_warningLow]: hasVariant($state, "color", "warningLow"),
          [sty.rootcolor_warning]: hasVariant($state, "color", "warning"),
          [sty.rootcolor_white]: hasVariant($state, "color", "white"),
          [sty.rootisDisabled]: hasVariant($state, "isDisabled", "isDisabled"),
          [sty.rootshape_round]: hasVariant($state, "shape", "round"),
          [sty.rootshape_round_size_compact]:
            hasVariant($state, "shape", "round") &&
            hasVariant($state, "size", "compact"),
          [sty.rootshape_rounded]: hasVariant($state, "shape", "rounded"),
          [sty.rootshape_rounded_showEndIcon]:
            hasVariant($state, "showEndIcon", "showEndIcon") &&
            hasVariant($state, "shape", "rounded"),
          [sty.rootshape_rounded_size_compact]:
            hasVariant($state, "size", "compact") &&
            hasVariant($state, "shape", "rounded"),
          [sty.rootshape_sharp]: hasVariant($state, "shape", "sharp"),
          [sty.rootshowEndIcon]: hasVariant(
            $state,
            "showEndIcon",
            "showEndIcon"
          ),
          [sty.rootshowStartIcon]: hasVariant(
            $state,
            "showStartIcon",
            "showStartIcon"
          ),
          [sty.rootshowStartIcon_shape_rounded]:
            hasVariant($state, "shape", "rounded") &&
            hasVariant($state, "showStartIcon", "showStartIcon"),
          [sty.rootshowStartIcon_size_compact]:
            hasVariant($state, "size", "compact") &&
            hasVariant($state, "showStartIcon", "showStartIcon"),
          [sty.rootshowStartIcon_size_compact_showEndIcon]:
            hasVariant($state, "size", "compact") &&
            hasVariant($state, "showStartIcon", "showStartIcon") &&
            hasVariant($state, "showEndIcon", "showEndIcon"),
          [sty.rootsize_compact]: hasVariant($state, "size", "compact"),
          [sty.rootsize_compact_showEndIcon]:
            hasVariant($state, "size", "compact") &&
            hasVariant($state, "showEndIcon", "showEndIcon"),
          [sty.rootsize_huge]: hasVariant($state, "size", "huge"),
          [sty.rootsize_minimal]: hasVariant($state, "size", "minimal"),
          [sty.rootsize_tiny]: hasVariant($state, "size", "tiny")
        }
      )}
    >
      {(
        hasVariant($state, "iconOnly", "iconOnly")
          ? true
          : hasVariant($state, "size", "tiny")
          ? true
          : hasVariant($state, "size", "huge")
          ? true
          : hasVariant($state, "showStartIcon", "showStartIcon")
          ? true
          : false
      ) ? (
        <div
          data-plasmic-name={"startIconContainer"}
          data-plasmic-override={overrides.startIconContainer}
          className={classNames(projectcss.all, sty.startIconContainer, {
            [sty.startIconContainercolor_info]: hasVariant(
              $state,
              "color",
              "info"
            ),
            [sty.startIconContainericonOnly]: hasVariant(
              $state,
              "iconOnly",
              "iconOnly"
            ),
            [sty.startIconContainershowStartIcon]: hasVariant(
              $state,
              "showStartIcon",
              "showStartIcon"
            ),
            [sty.startIconContainershowStartIcon_shape_rounded]:
              hasVariant($state, "shape", "rounded") &&
              hasVariant($state, "showStartIcon", "showStartIcon"),
            [sty.startIconContainersize_huge]: hasVariant(
              $state,
              "size",
              "huge"
            ),
            [sty.startIconContainersize_tiny]: hasVariant(
              $state,
              "size",
              "tiny"
            )
          })}
        >
          {p.renderPlasmicSlot({
            defaultContents: (
              <IconmonstrRefresh1SvgIcon
                className={classNames(projectcss.all, sty.svg__hvB59)}
                role={"img"}
              />
            ),

            value: args.startIcon,
            className: classNames(sty.slotTargetStartIcon, {
              [sty.slotTargetStartIconcolor_clear]: hasVariant(
                $state,
                "color",
                "clear"
              ),
              [sty.slotTargetStartIconcolor_disabled]: hasVariant(
                $state,
                "color",
                "disabled"
              ),
              [sty.slotTargetStartIconcolor_errorLow]: hasVariant(
                $state,
                "color",
                "errorLow"
              ),
              [sty.slotTargetStartIconcolor_info]: hasVariant(
                $state,
                "color",
                "info"
              ),
              [sty.slotTargetStartIconcolor_link]: hasVariant(
                $state,
                "color",
                "link"
              ),
              [sty.slotTargetStartIconcolor_successLow]: hasVariant(
                $state,
                "color",
                "successLow"
              ),
              [sty.slotTargetStartIconcolor_warningLow]: hasVariant(
                $state,
                "color",
                "warningLow"
              ),
              [sty.slotTargetStartIconcolor_warning]: hasVariant(
                $state,
                "color",
                "warning"
              ),
              [sty.slotTargetStartIconcolor_white]: hasVariant(
                $state,
                "color",
                "white"
              ),
              [sty.slotTargetStartIconshowStartIcon]: hasVariant(
                $state,
                "showStartIcon",
                "showStartIcon"
              ),
              [sty.slotTargetStartIconsize_tiny]: hasVariant(
                $state,
                "size",
                "tiny"
              )
            })
          })}
        </div>
      ) : null}
      <div
        data-plasmic-name={"contentContainer"}
        data-plasmic-override={overrides.contentContainer}
        className={classNames(projectcss.all, sty.contentContainer, {
          [sty.contentContainericonOnly]: hasVariant(
            $state,
            "iconOnly",
            "iconOnly"
          ),
          [sty.contentContainerisDisabled]: hasVariant(
            $state,
            "isDisabled",
            "isDisabled"
          ),
          [sty.contentContainershape_rounded]: hasVariant(
            $state,
            "shape",
            "rounded"
          ),
          [sty.contentContainershowEndIcon]: hasVariant(
            $state,
            "showEndIcon",
            "showEndIcon"
          ),
          [sty.contentContainersize_tiny]: hasVariant($state, "size", "tiny")
        })}
      >
        {p.renderPlasmicSlot({
          defaultContents: "Button",
          value: args.children,
          className: classNames(sty.slotTargetChildren, {
            [sty.slotTargetChildrencolor_clear]: hasVariant(
              $state,
              "color",
              "clear"
            ),
            [sty.slotTargetChildrencolor_coolAccentHigh]: hasVariant(
              $state,
              "color",
              "coolAccentHigh"
            ),
            [sty.slotTargetChildrencolor_coolAccentLow]: hasVariant(
              $state,
              "color",
              "coolAccentLow"
            ),
            [sty.slotTargetChildrencolor_coolAccent]: hasVariant(
              $state,
              "color",
              "coolAccent"
            ),
            [sty.slotTargetChildrencolor_disabled]: hasVariant(
              $state,
              "color",
              "disabled"
            ),
            [sty.slotTargetChildrencolor_errorHigh]: hasVariant(
              $state,
              "color",
              "errorHigh"
            ),
            [sty.slotTargetChildrencolor_errorLow]: hasVariant(
              $state,
              "color",
              "errorLow"
            ),
            [sty.slotTargetChildrencolor_error]: hasVariant(
              $state,
              "color",
              "error"
            ),
            [sty.slotTargetChildrencolor_infoHigh]: hasVariant(
              $state,
              "color",
              "infoHigh"
            ),
            [sty.slotTargetChildrencolor_infoLow]: hasVariant(
              $state,
              "color",
              "infoLow"
            ),
            [sty.slotTargetChildrencolor_info]: hasVariant(
              $state,
              "color",
              "info"
            ),
            [sty.slotTargetChildrencolor_link]: hasVariant(
              $state,
              "color",
              "link"
            ),
            [sty.slotTargetChildrencolor_link_size_minimal]:
              hasVariant($state, "color", "link") &&
              hasVariant($state, "size", "minimal"),
            [sty.slotTargetChildrencolor_primaryHigh]: hasVariant(
              $state,
              "color",
              "primaryHigh"
            ),
            [sty.slotTargetChildrencolor_primaryLow]: hasVariant(
              $state,
              "color",
              "primaryLow"
            ),
            [sty.slotTargetChildrencolor_primary]: hasVariant(
              $state,
              "color",
              "primary"
            ),
            [sty.slotTargetChildrencolor_secondaryHigh]: hasVariant(
              $state,
              "color",
              "secondaryHigh"
            ),
            [sty.slotTargetChildrencolor_secondaryLow]: hasVariant(
              $state,
              "color",
              "secondaryLow"
            ),
            [sty.slotTargetChildrencolor_secondary]: hasVariant(
              $state,
              "color",
              "secondary"
            ),
            [sty.slotTargetChildrencolor_successHigh]: hasVariant(
              $state,
              "color",
              "successHigh"
            ),
            [sty.slotTargetChildrencolor_successLow]: hasVariant(
              $state,
              "color",
              "successLow"
            ),
            [sty.slotTargetChildrencolor_success]: hasVariant(
              $state,
              "color",
              "success"
            ),
            [sty.slotTargetChildrencolor_warmAccentHigh]: hasVariant(
              $state,
              "color",
              "warmAccentHigh"
            ),
            [sty.slotTargetChildrencolor_warmAccentLow]: hasVariant(
              $state,
              "color",
              "warmAccentLow"
            ),
            [sty.slotTargetChildrencolor_warmAccent]: hasVariant(
              $state,
              "color",
              "warmAccent"
            ),
            [sty.slotTargetChildrencolor_warningHigh]: hasVariant(
              $state,
              "color",
              "warningHigh"
            ),
            [sty.slotTargetChildrencolor_warningLow]: hasVariant(
              $state,
              "color",
              "warningLow"
            ),
            [sty.slotTargetChildrencolor_warning]: hasVariant(
              $state,
              "color",
              "warning"
            ),
            [sty.slotTargetChildrencolor_white]: hasVariant(
              $state,
              "color",
              "white"
            ),
            [sty.slotTargetChildreniconOnly]: hasVariant(
              $state,
              "iconOnly",
              "iconOnly"
            ),
            [sty.slotTargetChildrenisDisabled]: hasVariant(
              $state,
              "isDisabled",
              "isDisabled"
            ),
            [sty.slotTargetChildrenshape_rounded]: hasVariant(
              $state,
              "shape",
              "rounded"
            ),
            [sty.slotTargetChildrenshowEndIcon]: hasVariant(
              $state,
              "showEndIcon",
              "showEndIcon"
            ),
            [sty.slotTargetChildrenshowStartIcon]: hasVariant(
              $state,
              "showStartIcon",
              "showStartIcon"
            ),
            [sty.slotTargetChildrensize_minimal]: hasVariant(
              $state,
              "size",
              "minimal"
            )
          })
        })}
      </div>
      {(
        hasVariant($state, "iconOnly", "iconOnly")
          ? true
          : hasVariant($state, "showEndIcon", "showEndIcon")
          ? true
          : false
      ) ? (
        <div
          data-plasmic-name={"endIconContainer"}
          data-plasmic-override={overrides.endIconContainer}
          className={classNames(projectcss.all, sty.endIconContainer, {
            [sty.endIconContainercolor_warning]: hasVariant(
              $state,
              "color",
              "warning"
            ),
            [sty.endIconContainercolor_white]: hasVariant(
              $state,
              "color",
              "white"
            ),
            [sty.endIconContainericonOnly]: hasVariant(
              $state,
              "iconOnly",
              "iconOnly"
            ),
            [sty.endIconContainershowEndIcon]: hasVariant(
              $state,
              "showEndIcon",
              "showEndIcon"
            )
          })}
        >
          {p.renderPlasmicSlot({
            defaultContents: (
              <IconIcon
                className={classNames(projectcss.all, sty.svg___4Ku6V)}
                role={"img"}
              />
            ),

            value: args.endIcon,
            className: classNames(sty.slotTargetEndIcon, {
              [sty.slotTargetEndIconcolor_clear]: hasVariant(
                $state,
                "color",
                "clear"
              ),
              [sty.slotTargetEndIconcolor_disabled]: hasVariant(
                $state,
                "color",
                "disabled"
              ),
              [sty.slotTargetEndIconcolor_errorLow]: hasVariant(
                $state,
                "color",
                "errorLow"
              ),
              [sty.slotTargetEndIconcolor_link]: hasVariant(
                $state,
                "color",
                "link"
              ),
              [sty.slotTargetEndIconcolor_successLow]: hasVariant(
                $state,
                "color",
                "successLow"
              ),
              [sty.slotTargetEndIconcolor_warningLow]: hasVariant(
                $state,
                "color",
                "warningLow"
              ),
              [sty.slotTargetEndIconcolor_warning]: hasVariant(
                $state,
                "color",
                "warning"
              ),
              [sty.slotTargetEndIconcolor_white]: hasVariant(
                $state,
                "color",
                "white"
              ),
              [sty.slotTargetEndIconshowEndIcon]: hasVariant(
                $state,
                "showEndIcon",
                "showEndIcon"
              )
            })
          })}
        </div>
      ) : null}
    </p.Stack>
  ) as React.ReactElement | null;
}

function useBehavior<P extends pp.PlumeButtonProps>(
  props: P,
  ref: pp.ButtonRef
) {
  const b = pp.useButton<P, typeof PlasmicButton>(
    PlasmicButton,
    props,
    {
      showStartIconVariant: {
        group: "showStartIcon",
        variant: "showStartIcon"
      },
      showEndIconVariant: { group: "showEndIcon", variant: "showEndIcon" },
      isDisabledVariant: { group: "isDisabled", variant: "isDisabled" },
      contentSlot: "children",
      startIconSlot: "startIcon",
      endIconSlot: "endIcon",
      root: "root"
    },
    ref
  );
  if (b.plasmicProps.overrides.root.as === "a") {
    b.plasmicProps.overrides.root.as = p.PlasmicLink;
    b.plasmicProps.overrides.root.props.component = Link;
    b.plasmicProps.overrides.root.props.platform = "nextjs";
  }
  return b;
}

const PlasmicDescendants = {
  root: ["root", "startIconContainer", "contentContainer", "endIconContainer"],
  startIconContainer: ["startIconContainer"],
  contentContainer: ["contentContainer"],
  endIconContainer: ["endIconContainer"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "button";
  startIconContainer: "div";
  contentContainer: "div";
  endIconContainer: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicButton__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicButton__VariantsArgs;
    args?: PlasmicButton__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicButton__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicButton__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicButton__ArgProps,
          internalVariantPropNames: PlasmicButton__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicButton__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicButton";
  } else {
    func.displayName = `PlasmicButton.${nodeName}`;
  }
  return func;
}

export const PlasmicButton = Object.assign(
  // Top-level PlasmicButton renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    startIconContainer: makeNodeComponent("startIconContainer"),
    contentContainer: makeNodeComponent("contentContainer"),
    endIconContainer: makeNodeComponent("endIconContainer"),

    // Metadata about props expected for PlasmicButton
    internalVariantProps: PlasmicButton__VariantProps,
    internalArgProps: PlasmicButton__ArgProps,

    useBehavior
  }
);

export default PlasmicButton;
/* prettier-ignore-end */

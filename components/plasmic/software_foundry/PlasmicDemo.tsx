// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: gqxPS4AgvrvZFiLQ3PbJ65
// Component: SAIz_cdxQrvD

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import PageLayout from "../../PageLayout"; // plasmic-import: xGklKYpUUGMg/component
import NavigationBar from "../../NavigationBar"; // plasmic-import: JQmM1UuIubiQ/component
import Button from "../../Button"; // plasmic-import: 3WK9FRVCXJcs/component
import Logo from "../../Logo"; // plasmic-import: No_gtKjzaEYA/component
import Footer from "../../Footer"; // plasmic-import: Q20KHtWWjNMw/component

import { useScreenVariants as useScreenVariantsqdQm7NvRVzjp } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: QdQM7NvRVzjp/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_app_starter_hostless_no_auth_test_css from "../app_starter_hostless_no_auth_test/plasmic_app_starter_hostless_no_auth_test.module.css"; // plasmic-import: waVhN6sKC41JduCkjZHFuq/projectcss
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic_software_foundry.module.css"; // plasmic-import: gqxPS4AgvrvZFiLQ3PbJ65/projectcss
import sty from "./PlasmicDemo.module.css"; // plasmic-import: SAIz_cdxQrvD/css

import IconmonstrRefresh1SvgIcon from "./icons/PlasmicIcon__IconmonstrRefresh1Svg"; // plasmic-import: WhpeF1cGeUrK/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: QI7Bkirsjidh/icon

createPlasmicElementProxy;

export type PlasmicDemo__VariantMembers = {};
export type PlasmicDemo__VariantsArgs = {};
type VariantPropType = keyof PlasmicDemo__VariantsArgs;
export const PlasmicDemo__VariantProps = new Array<VariantPropType>();

export type PlasmicDemo__ArgsType = {};
type ArgPropType = keyof PlasmicDemo__ArgsType;
export const PlasmicDemo__ArgProps = new Array<ArgPropType>();

export type PlasmicDemo__OverridesType = {
  root?: p.Flex<"section">;
  pageLayout?: p.Flex<typeof PageLayout>;
  pageBanerSection?: p.Flex<"div">;
  section?: p.Flex<"section">;
  columns?: p.Flex<"div">;
  column?: p.Flex<"div">;
  img?: p.Flex<typeof p.PlasmicImg>;
  navigationBar?: p.Flex<typeof NavigationBar>;
};

export interface DefaultDemoProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicDemo__RenderFunc(props: {
  variants: PlasmicDemo__VariantsArgs;
  args: PlasmicDemo__ArgsType;
  overrides: PlasmicDemo__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsqdQm7NvRVzjp()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <section
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_app_starter_hostless_no_auth_test_css.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            sty.root
          )}
        >
          <PageLayout
            data-plasmic-name={"pageLayout"}
            data-plasmic-override={overrides.pageLayout}
            className={classNames("__wab_instance", sty.pageLayout)}
            slot={
              <NavigationBar
                data-plasmic-name={"navigationBar"}
                data-plasmic-override={overrides.navigationBar}
                className={classNames("__wab_instance", sty.navigationBar)}
              >
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__fqLo0)}
                >
                  <Button
                    className={classNames("__wab_instance", sty.button__mnXCk)}
                    color={"link"}
                    link={`/`}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__nt1LY
                      )}
                    >
                      {"Home"}
                    </div>
                  </Button>
                  <Button
                    className={classNames("__wab_instance", sty.button__t3O)}
                    color={"clear"}
                    link={`/demo`}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__ylxBo
                      )}
                    >
                      {"Try Demo"}
                    </div>
                  </Button>
                  <Button
                    className={classNames("__wab_instance", sty.button___6VsFj)}
                    color={"primary"}
                    link={`/partnership`}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__e4AqH
                      )}
                    >
                      {"Become a Partner"}
                    </div>
                  </Button>
                </p.Stack>
              </NavigationBar>
            }
          >
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__v8K7U)}
            >
              <div
                data-plasmic-name={"pageBanerSection"}
                data-plasmic-override={overrides.pageBanerSection}
                className={classNames(projectcss.all, sty.pageBanerSection)}
              >
                <div className={classNames(projectcss.all, sty.freeBox__ejsPz)}>
                  <h1
                    className={classNames(
                      projectcss.all,
                      projectcss.h1,
                      projectcss.__wab_text,
                      sty.h1__wj7Yb
                    )}
                  >
                    {"get in line for the Professional Planner"}
                  </h1>
                </div>
              </div>
              <section
                data-plasmic-name={"section"}
                data-plasmic-override={overrides.section}
                className={classNames(projectcss.all, sty.section)}
              >
                <div className={classNames(projectcss.all, sty.freeBox__qW4Rt)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__fv1P8)}
                  >
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__eQPq)}
                    >
                      <p.Stack
                        as={"div"}
                        data-plasmic-name={"columns"}
                        data-plasmic-override={overrides.columns}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.columns)}
                      >
                        <div
                          data-plasmic-name={"column"}
                          data-plasmic-override={overrides.column}
                          className={classNames(projectcss.all, sty.column)}
                        >
                          <p.Stack
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__olTf3
                            )}
                          >
                            <h1
                              className={classNames(
                                projectcss.all,
                                projectcss.h1,
                                projectcss.__wab_text,
                                sty.h1__oM3G9
                              )}
                            >
                              {"coming soon"}
                            </h1>
                          </p.Stack>
                          <p.PlasmicImg
                            data-plasmic-name={"img"}
                            data-plasmic-override={overrides.img}
                            alt={""}
                            className={classNames(sty.img)}
                            displayHeight={"100%"}
                            displayMaxHeight={"none"}
                            displayMaxWidth={"100%"}
                            displayMinHeight={"0"}
                            displayMinWidth={"0"}
                            displayWidth={"100%"}
                            loading={"lazy"}
                            src={
                              "https://cdn.pixabay.com/photo/2023/05/24/23/02/cat-8016028_1280.png"
                            }
                          />
                        </div>
                      </p.Stack>
                    </p.Stack>
                  </div>
                </div>
              </section>
            </p.Stack>
          </PageLayout>
        </section>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "pageLayout",
    "pageBanerSection",
    "section",
    "columns",
    "column",
    "img",
    "navigationBar"
  ],
  pageLayout: [
    "pageLayout",
    "pageBanerSection",
    "section",
    "columns",
    "column",
    "img",
    "navigationBar"
  ],
  pageBanerSection: ["pageBanerSection"],
  section: ["section", "columns", "column", "img"],
  columns: ["columns", "column", "img"],
  column: ["column", "img"],
  img: ["img"],
  navigationBar: ["navigationBar"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "section";
  pageLayout: typeof PageLayout;
  pageBanerSection: "div";
  section: "section";
  columns: "div";
  column: "div";
  img: typeof p.PlasmicImg;
  navigationBar: typeof NavigationBar;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicDemo__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicDemo__VariantsArgs;
    args?: PlasmicDemo__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicDemo__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicDemo__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicDemo__ArgProps,
          internalVariantPropNames: PlasmicDemo__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicDemo__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicDemo";
  } else {
    func.displayName = `PlasmicDemo.${nodeName}`;
  }
  return func;
}

export const PlasmicDemo = Object.assign(
  // Top-level PlasmicDemo renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    pageLayout: makeNodeComponent("pageLayout"),
    pageBanerSection: makeNodeComponent("pageBanerSection"),
    section: makeNodeComponent("section"),
    columns: makeNodeComponent("columns"),
    column: makeNodeComponent("column"),
    img: makeNodeComponent("img"),
    navigationBar: makeNodeComponent("navigationBar"),

    // Metadata about props expected for PlasmicDemo
    internalVariantProps: PlasmicDemo__VariantProps,
    internalArgProps: PlasmicDemo__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicDemo;
/* prettier-ignore-end */

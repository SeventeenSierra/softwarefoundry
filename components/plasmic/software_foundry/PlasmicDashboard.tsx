// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: gqxPS4AgvrvZFiLQ3PbJ65
// Component: ZxtD48M5gtEh

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import StatGroup from "../../StatGroup"; // plasmic-import: hONZ2MGB7n8c/component
import Statistic from "../../Statistic"; // plasmic-import: bEDFqLeOb3k4/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_app_starter_hostless_no_auth_test_css from "../app_starter_hostless_no_auth_test/plasmic_app_starter_hostless_no_auth_test.module.css"; // plasmic-import: waVhN6sKC41JduCkjZHFuq/projectcss
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic_software_foundry.module.css"; // plasmic-import: gqxPS4AgvrvZFiLQ3PbJ65/projectcss
import sty from "./PlasmicDashboard.module.css"; // plasmic-import: ZxtD48M5gtEh/css

createPlasmicElementProxy;

export type PlasmicDashboard__VariantMembers = {
  kind: "alpha" | "beta" | "charlie" | "unnamedVariant";
};
export type PlasmicDashboard__VariantsArgs = {
  kind?: SingleChoiceArg<"alpha" | "beta" | "charlie" | "unnamedVariant">;
};
type VariantPropType = keyof PlasmicDashboard__VariantsArgs;
export const PlasmicDashboard__VariantProps = new Array<VariantPropType>(
  "kind"
);

export type PlasmicDashboard__ArgsType = {
  children?: React.ReactNode;
  slot?: React.ReactNode;
  slot2?: React.ReactNode;
  slot3?: React.ReactNode;
  slot4?: React.ReactNode;
  slot5?: React.ReactNode;
  slot6?: React.ReactNode;
  slot7?: React.ReactNode;
};
type ArgPropType = keyof PlasmicDashboard__ArgsType;
export const PlasmicDashboard__ArgProps = new Array<ArgPropType>(
  "children",
  "slot",
  "slot2",
  "slot3",
  "slot4",
  "slot5",
  "slot6",
  "slot7"
);

export type PlasmicDashboard__OverridesType = {
  root?: p.Flex<"div">;
};

export interface DefaultDashboardProps {
  children?: React.ReactNode;
  slot?: React.ReactNode;
  slot2?: React.ReactNode;
  slot3?: React.ReactNode;
  slot4?: React.ReactNode;
  slot5?: React.ReactNode;
  slot6?: React.ReactNode;
  slot7?: React.ReactNode;
  kind?: SingleChoiceArg<"alpha" | "beta" | "charlie" | "unnamedVariant">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicDashboard__RenderFunc(props: {
  variants: PlasmicDashboard__VariantsArgs;
  args: PlasmicDashboard__ArgsType;
  overrides: PlasmicDashboard__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof p.useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "kind",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.kind
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = p.useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_app_starter_hostless_no_auth_test_css.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.root,
        {
          [sty.rootkind_alpha]: hasVariant($state, "kind", "alpha"),
          [sty.rootkind_beta]: hasVariant($state, "kind", "beta"),
          [sty.rootkind_charlie]: hasVariant($state, "kind", "charlie"),
          [sty.rootkind_unnamedVariant]: hasVariant(
            $state,
            "kind",
            "unnamedVariant"
          )
        }
      )}
    >
      <div
        className={classNames(projectcss.all, sty.freeBox__rxiMh, {
          [sty.freeBoxkind_alpha__rxiMhmFrWo]: hasVariant(
            $state,
            "kind",
            "alpha"
          )
        })}
      >
        <div
          className={classNames(projectcss.all, sty.freeBox___14T4E, {
            [sty.freeBoxkind_alpha___14T4EmFrWo]: hasVariant(
              $state,
              "kind",
              "alpha"
            )
          })}
        >
          {p.renderPlasmicSlot({
            defaultContents: (
              <StatGroup
                className={classNames("__wab_instance", sty.statGroup__ygtQd)}
                shape2={"single"}
              />
            ),

            value: args.slot4
          })}
          {p.renderPlasmicSlot({
            defaultContents: (
              <StatGroup
                className={classNames("__wab_instance", sty.statGroup__mLDlE)}
                shape2={"single"}
              />
            ),

            value: args.slot5
          })}
          {p.renderPlasmicSlot({
            defaultContents: (
              <StatGroup
                className={classNames("__wab_instance", sty.statGroup__ko7Yx)}
                shape2={"single"}
              />
            ),

            value: args.slot6
          })}
          {p.renderPlasmicSlot({
            defaultContents: (
              <StatGroup
                className={classNames("__wab_instance", sty.statGroup__xRr8V)}
                shape2={"single"}
              />
            ),

            value: args.children
          })}
        </div>
        <div
          className={classNames(projectcss.all, sty.freeBox__jQpJo, {
            [sty.freeBoxkind_alpha__jQpJomFrWo]: hasVariant(
              $state,
              "kind",
              "alpha"
            ),
            [sty.freeBoxkind_beta__jQpJonUib]: hasVariant(
              $state,
              "kind",
              "beta"
            )
          })}
        >
          {p.renderPlasmicSlot({
            defaultContents: (
              <StatGroup
                className={classNames("__wab_instance", sty.statGroup__n8Wfz)}
                shape2={"triangle"}
              />
            ),

            value: args.slot
          })}
          {p.renderPlasmicSlot({
            defaultContents: (
              <StatGroup
                className={classNames("__wab_instance", sty.statGroup__b1XeF)}
                shape2={"pyramid"}
              />
            ),

            value: args.slot2
          })}
          {p.renderPlasmicSlot({
            defaultContents: (
              <StatGroup
                className={classNames("__wab_instance", sty.statGroup__tMj5)}
                shape2={"triangle"}
              />
            ),

            value: args.slot3
          })}
          {p.renderPlasmicSlot({
            defaultContents: (
              <StatGroup
                className={classNames("__wab_instance", sty.statGroup___7QCt2)}
              />
            ),

            value: args.slot7
          })}
        </div>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicDashboard__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicDashboard__VariantsArgs;
    args?: PlasmicDashboard__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicDashboard__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicDashboard__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicDashboard__ArgProps,
          internalVariantPropNames: PlasmicDashboard__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicDashboard__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicDashboard";
  } else {
    func.displayName = `PlasmicDashboard.${nodeName}`;
  }
  return func;
}

export const PlasmicDashboard = Object.assign(
  // Top-level PlasmicDashboard renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicDashboard
    internalVariantProps: PlasmicDashboard__VariantProps,
    internalArgProps: PlasmicDashboard__ArgProps
  }
);

export default PlasmicDashboard;
/* prettier-ignore-end */

// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: gqxPS4AgvrvZFiLQ3PbJ65
// Component: W96nhGb8MtHk

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import * as pp from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_app_starter_hostless_no_auth_test_css from "../app_starter_hostless_no_auth_test/plasmic_app_starter_hostless_no_auth_test.module.css"; // plasmic-import: waVhN6sKC41JduCkjZHFuq/projectcss
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic_software_foundry.module.css"; // plasmic-import: gqxPS4AgvrvZFiLQ3PbJ65/projectcss
import sty from "./PlasmicCheckbox.module.css"; // plasmic-import: W96nhGb8MtHk/css

import SquaresvgIcon from "./icons/PlasmicIcon__Squaresvg"; // plasmic-import: OLv4uFFOCfq0/icon
import SquareCheckFilledsvgIcon from "./icons/PlasmicIcon__SquareCheckFilledsvg"; // plasmic-import: F3ipt6UuNTNf/icon
import SquareMinussvgIcon from "./icons/PlasmicIcon__SquareMinussvg"; // plasmic-import: juvBctkRr7yS/icon
import Icon2Icon from "./icons/PlasmicIcon__Icon2"; // plasmic-import: 5Q8owDwLIH_p/icon

createPlasmicElementProxy;

export type PlasmicCheckbox__VariantMembers = {
  noLabel: "noLabel";
  isDisabled: "isDisabled";
  isChecked: "isChecked";
  isIndeterminate: "isIndeterminate";
  color:
    | "error"
    | "success"
    | "warning"
    | "info"
    | "primary"
    | "secondary"
    | "warmAccent"
    | "coolAccent"
    | "errorLow"
    | "errorHigh"
    | "warningLow"
    | "warningHigh"
    | "successLow"
    | "successHigh"
    | "infoLow"
    | "infoHigh"
    | "primaryHigh"
    | "primaryLow"
    | "secondaryHigh"
    | "secondaryLow"
    | "accentWarmLow"
    | "accentWarmHigh"
    | "accentCoolLow"
    | "accentCoolHigh";
  isHeart: "isHeart";
  justIcon: "justIcon";
};
export type PlasmicCheckbox__VariantsArgs = {
  noLabel?: SingleBooleanChoiceArg<"noLabel">;
  isDisabled?: SingleBooleanChoiceArg<"isDisabled">;
  isChecked?: SingleBooleanChoiceArg<"isChecked">;
  isIndeterminate?: SingleBooleanChoiceArg<"isIndeterminate">;
  color?: SingleChoiceArg<
    | "error"
    | "success"
    | "warning"
    | "info"
    | "primary"
    | "secondary"
    | "warmAccent"
    | "coolAccent"
    | "errorLow"
    | "errorHigh"
    | "warningLow"
    | "warningHigh"
    | "successLow"
    | "successHigh"
    | "infoLow"
    | "infoHigh"
    | "primaryHigh"
    | "primaryLow"
    | "secondaryHigh"
    | "secondaryLow"
    | "accentWarmLow"
    | "accentWarmHigh"
    | "accentCoolLow"
    | "accentCoolHigh"
  >;
  isHeart?: SingleBooleanChoiceArg<"isHeart">;
  justIcon?: SingleBooleanChoiceArg<"justIcon">;
};
type VariantPropType = keyof PlasmicCheckbox__VariantsArgs;
export const PlasmicCheckbox__VariantProps = new Array<VariantPropType>(
  "noLabel",
  "isDisabled",
  "isChecked",
  "isIndeterminate",
  "color",
  "isHeart",
  "justIcon"
);

export type PlasmicCheckbox__ArgsType = {
  children?: React.ReactNode;
  name?: string;
  value?: string;
  "aria-label"?: string;
  "aria-labelledby"?: string;
  onChange?: (isChecked: boolean) => void;
  onNoLabelChange?: (val: any) => void;
};
type ArgPropType = keyof PlasmicCheckbox__ArgsType;
export const PlasmicCheckbox__ArgProps = new Array<ArgPropType>(
  "children",
  "name",
  "value",
  "aria-label",
  "aria-labelledby",
  "onChange",
  "onNoLabelChange"
);

export type PlasmicCheckbox__OverridesType = {
  root?: p.Flex<"div">;
  freeBox?: p.Flex<"div">;
  svg?: p.Flex<"svg">;
  labelContainer?: p.Flex<"div">;
};

export interface DefaultCheckboxProps extends pp.CheckboxProps {
  "aria-label"?: string;
  "aria-labelledby"?: string;
  onChange?: (isChecked: boolean) => void;
  onNoLabelChange?: (val: any) => void;
  color?: SingleChoiceArg<
    | "error"
    | "success"
    | "warning"
    | "info"
    | "primary"
    | "secondary"
    | "warmAccent"
    | "coolAccent"
    | "errorLow"
    | "errorHigh"
    | "warningLow"
    | "warningHigh"
    | "successLow"
    | "successHigh"
    | "infoLow"
    | "infoHigh"
    | "primaryHigh"
    | "primaryLow"
    | "secondaryHigh"
    | "secondaryLow"
    | "accentWarmLow"
    | "accentWarmHigh"
    | "accentCoolLow"
    | "accentCoolHigh"
  >;
  isHeart?: SingleBooleanChoiceArg<"isHeart">;
  justIcon?: SingleBooleanChoiceArg<"justIcon">;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicCheckbox__RenderFunc(props: {
  variants: PlasmicCheckbox__VariantsArgs;
  args: PlasmicCheckbox__ArgsType;
  overrides: PlasmicCheckbox__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof p.useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "noLabel",
        type: "writable",
        variableType: "variant",

        valueProp: "noLabel",
        onChangeProp: "onNoLabelChange"
      },
      {
        path: "isDisabled",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.isDisabled
      },
      {
        path: "isChecked",
        type: "writable",
        variableType: "boolean",

        valueProp: "isChecked",
        onChangeProp: "onChange"
      },
      {
        path: "isIndeterminate",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.isIndeterminate
      },
      {
        path: "color",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.color
      },
      {
        path: "isHeart",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.isHeart
      },
      {
        path: "justIcon",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.justIcon
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = p.useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const [isRootFocusVisibleWithin, triggerRootFocusVisibleWithinProps] =
    useTrigger("useFocusVisibleWithin", {
      isTextInput: false
    });
  const triggers = {
    focusVisibleWithin_root: isRootFocusVisibleWithin
  };

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_app_starter_hostless_no_auth_test_css.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.root,
        {
          [sty.root___focusVisibleWithin]: triggers.focusVisibleWithin_root,
          [sty.rootisChecked]: hasVariant($state, "isChecked", "isChecked"),
          [sty.rootisDisabled]: hasVariant($state, "isDisabled", "isDisabled"),
          [sty.rootisIndeterminate]: hasVariant(
            $state,
            "isIndeterminate",
            "isIndeterminate"
          ),
          [sty.rootnoLabel]: hasVariant($state, "noLabel", "noLabel")
        }
      )}
      data-plasmic-trigger-props={[triggerRootFocusVisibleWithinProps]}
    >
      <div
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        className={classNames(projectcss.all, sty.freeBox, {
          [sty.freeBox___focusVisibleWithin]: triggers.focusVisibleWithin_root,
          [sty.freeBoxisChecked]: hasVariant($state, "isChecked", "isChecked"),
          [sty.freeBoxisDisabled]: hasVariant(
            $state,
            "isDisabled",
            "isDisabled"
          ),
          [sty.freeBoxisIndeterminate]: hasVariant(
            $state,
            "isIndeterminate",
            "isIndeterminate"
          ),
          [sty.freeBoxnoLabel]: hasVariant($state, "noLabel", "noLabel")
        })}
      >
        <p.PlasmicIcon
          data-plasmic-name={"svg"}
          data-plasmic-override={overrides.svg}
          PlasmicIconType={
            hasVariant($state, "isHeart", "isHeart")
              ? Icon2Icon
              : hasVariant($state, "isIndeterminate", "isIndeterminate")
              ? SquareMinussvgIcon
              : hasVariant($state, "isChecked", "isChecked")
              ? SquareCheckFilledsvgIcon
              : SquaresvgIcon
          }
          className={classNames(projectcss.all, sty.svg, {
            [sty.svg___focusVisibleWithin]: triggers.focusVisibleWithin_root,
            [sty.svgcolor_accentCoolHigh]: hasVariant(
              $state,
              "color",
              "accentCoolHigh"
            ),
            [sty.svgcolor_accentCoolLow]: hasVariant(
              $state,
              "color",
              "accentCoolLow"
            ),
            [sty.svgcolor_accentWarmHigh]: hasVariant(
              $state,
              "color",
              "accentWarmHigh"
            ),
            [sty.svgcolor_accentWarmLow]: hasVariant(
              $state,
              "color",
              "accentWarmLow"
            ),
            [sty.svgcolor_coolAccent]: hasVariant(
              $state,
              "color",
              "coolAccent"
            ),
            [sty.svgcolor_errorHigh]: hasVariant($state, "color", "errorHigh"),
            [sty.svgcolor_errorLow]: hasVariant($state, "color", "errorLow"),
            [sty.svgcolor_error]: hasVariant($state, "color", "error"),
            [sty.svgcolor_infoHigh]: hasVariant($state, "color", "infoHigh"),
            [sty.svgcolor_infoLow]: hasVariant($state, "color", "infoLow"),
            [sty.svgcolor_info]: hasVariant($state, "color", "info"),
            [sty.svgcolor_primaryHigh]: hasVariant(
              $state,
              "color",
              "primaryHigh"
            ),
            [sty.svgcolor_primaryLow]: hasVariant(
              $state,
              "color",
              "primaryLow"
            ),
            [sty.svgcolor_primary]: hasVariant($state, "color", "primary"),
            [sty.svgcolor_secondaryHigh]: hasVariant(
              $state,
              "color",
              "secondaryHigh"
            ),
            [sty.svgcolor_secondaryLow]: hasVariant(
              $state,
              "color",
              "secondaryLow"
            ),
            [sty.svgcolor_secondary]: hasVariant($state, "color", "secondary"),
            [sty.svgcolor_successHigh]: hasVariant(
              $state,
              "color",
              "successHigh"
            ),
            [sty.svgcolor_successLow]: hasVariant(
              $state,
              "color",
              "successLow"
            ),
            [sty.svgcolor_success]: hasVariant($state, "color", "success"),
            [sty.svgcolor_warmAccent]: hasVariant(
              $state,
              "color",
              "warmAccent"
            ),
            [sty.svgcolor_warningHigh]: hasVariant(
              $state,
              "color",
              "warningHigh"
            ),
            [sty.svgcolor_warningLow]: hasVariant(
              $state,
              "color",
              "warningLow"
            ),
            [sty.svgcolor_warning]: hasVariant($state, "color", "warning"),
            [sty.svgisChecked]: hasVariant($state, "isChecked", "isChecked"),
            [sty.svgisDisabled]: hasVariant($state, "isDisabled", "isDisabled"),
            [sty.svgisHeart]: hasVariant($state, "isHeart", "isHeart"),
            [sty.svgisIndeterminate]: hasVariant(
              $state,
              "isIndeterminate",
              "isIndeterminate"
            ),
            [sty.svgnoLabel]: hasVariant($state, "noLabel", "noLabel")
          })}
          role={"img"}
        />
      </div>
      {(hasVariant($state, "noLabel", "noLabel") ? false : true) ? (
        <div
          data-plasmic-name={"labelContainer"}
          data-plasmic-override={overrides.labelContainer}
          className={classNames(projectcss.all, sty.labelContainer, {
            [sty.labelContainer___focusVisibleWithin]:
              triggers.focusVisibleWithin_root,
            [sty.labelContainerisDisabled]: hasVariant(
              $state,
              "isDisabled",
              "isDisabled"
            ),
            [sty.labelContainernoLabel]: hasVariant(
              $state,
              "noLabel",
              "noLabel"
            )
          })}
        >
          {(hasVariant($state, "justIcon", "justIcon") ? false : true)
            ? p.renderPlasmicSlot({
                defaultContents: "Enter some text",
                value: args.children,
                className: classNames(sty.slotTargetChildren, {
                  [sty.slotTargetChildren___focusVisibleWithin]:
                    triggers.focusVisibleWithin_root,
                  [sty.slotTargetChildrencolor_accentCoolHigh]: hasVariant(
                    $state,
                    "color",
                    "accentCoolHigh"
                  ),
                  [sty.slotTargetChildrencolor_accentCoolLow]: hasVariant(
                    $state,
                    "color",
                    "accentCoolLow"
                  ),
                  [sty.slotTargetChildrencolor_accentWarmHigh]: hasVariant(
                    $state,
                    "color",
                    "accentWarmHigh"
                  ),
                  [sty.slotTargetChildrencolor_accentWarmLow]: hasVariant(
                    $state,
                    "color",
                    "accentWarmLow"
                  ),
                  [sty.slotTargetChildrencolor_coolAccent]: hasVariant(
                    $state,
                    "color",
                    "coolAccent"
                  ),
                  [sty.slotTargetChildrencolor_errorHigh]: hasVariant(
                    $state,
                    "color",
                    "errorHigh"
                  ),
                  [sty.slotTargetChildrencolor_errorLow]: hasVariant(
                    $state,
                    "color",
                    "errorLow"
                  ),
                  [sty.slotTargetChildrencolor_error]: hasVariant(
                    $state,
                    "color",
                    "error"
                  ),
                  [sty.slotTargetChildrencolor_infoHigh]: hasVariant(
                    $state,
                    "color",
                    "infoHigh"
                  ),
                  [sty.slotTargetChildrencolor_infoLow]: hasVariant(
                    $state,
                    "color",
                    "infoLow"
                  ),
                  [sty.slotTargetChildrencolor_info]: hasVariant(
                    $state,
                    "color",
                    "info"
                  ),
                  [sty.slotTargetChildrencolor_primaryHigh]: hasVariant(
                    $state,
                    "color",
                    "primaryHigh"
                  ),
                  [sty.slotTargetChildrencolor_primaryLow]: hasVariant(
                    $state,
                    "color",
                    "primaryLow"
                  ),
                  [sty.slotTargetChildrencolor_primary]: hasVariant(
                    $state,
                    "color",
                    "primary"
                  ),
                  [sty.slotTargetChildrencolor_secondaryHigh]: hasVariant(
                    $state,
                    "color",
                    "secondaryHigh"
                  ),
                  [sty.slotTargetChildrencolor_secondaryLow]: hasVariant(
                    $state,
                    "color",
                    "secondaryLow"
                  ),
                  [sty.slotTargetChildrencolor_secondary]: hasVariant(
                    $state,
                    "color",
                    "secondary"
                  ),
                  [sty.slotTargetChildrencolor_successHigh]: hasVariant(
                    $state,
                    "color",
                    "successHigh"
                  ),
                  [sty.slotTargetChildrencolor_successLow]: hasVariant(
                    $state,
                    "color",
                    "successLow"
                  ),
                  [sty.slotTargetChildrencolor_success]: hasVariant(
                    $state,
                    "color",
                    "success"
                  ),
                  [sty.slotTargetChildrencolor_warmAccent]: hasVariant(
                    $state,
                    "color",
                    "warmAccent"
                  ),
                  [sty.slotTargetChildrencolor_warningHigh]: hasVariant(
                    $state,
                    "color",
                    "warningHigh"
                  ),
                  [sty.slotTargetChildrencolor_warningLow]: hasVariant(
                    $state,
                    "color",
                    "warningLow"
                  ),
                  [sty.slotTargetChildrencolor_warning]: hasVariant(
                    $state,
                    "color",
                    "warning"
                  ),
                  [sty.slotTargetChildrenisChecked]: hasVariant(
                    $state,
                    "isChecked",
                    "isChecked"
                  ),
                  [sty.slotTargetChildrenisDisabled]: hasVariant(
                    $state,
                    "isDisabled",
                    "isDisabled"
                  ),
                  [sty.slotTargetChildrenisIndeterminate]: hasVariant(
                    $state,
                    "isIndeterminate",
                    "isIndeterminate"
                  ),
                  [sty.slotTargetChildrenjustIcon]: hasVariant(
                    $state,
                    "justIcon",
                    "justIcon"
                  ),
                  [sty.slotTargetChildrennoLabel]: hasVariant(
                    $state,
                    "noLabel",
                    "noLabel"
                  )
                })
              })
            : null}
        </div>
      ) : null}
    </p.Stack>
  ) as React.ReactElement | null;
}

function useBehavior<P extends pp.CheckboxProps>(
  props: P,
  ref: pp.CheckboxRef
) {
  if (!("children" in props)) {
    props = {
      ...props,
      children: "Enter some text"
    };
  }

  return pp.useCheckbox<P, typeof PlasmicCheckbox>(
    PlasmicCheckbox,
    props,
    {
      isCheckedVariant: { group: "isChecked", variant: "isChecked" },
      isIndeterminateVariant: {
        group: "isIndeterminate",
        variant: "isIndeterminate"
      },
      isDisabledVariant: { group: "isDisabled", variant: "isDisabled" },
      noLabelVariant: { group: "noLabel", variant: "noLabel" },
      labelSlot: "children",
      root: "root"
    },
    ref
  );
}

const PlasmicDescendants = {
  root: ["root", "freeBox", "svg", "labelContainer"],
  freeBox: ["freeBox", "svg"],
  svg: ["svg"],
  labelContainer: ["labelContainer"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  freeBox: "div";
  svg: "svg";
  labelContainer: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicCheckbox__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicCheckbox__VariantsArgs;
    args?: PlasmicCheckbox__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicCheckbox__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicCheckbox__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicCheckbox__ArgProps,
          internalVariantPropNames: PlasmicCheckbox__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicCheckbox__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCheckbox";
  } else {
    func.displayName = `PlasmicCheckbox.${nodeName}`;
  }
  return func;
}

export const PlasmicCheckbox = Object.assign(
  // Top-level PlasmicCheckbox renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),
    svg: makeNodeComponent("svg"),
    labelContainer: makeNodeComponent("labelContainer"),

    // Metadata about props expected for PlasmicCheckbox
    internalVariantProps: PlasmicCheckbox__VariantProps,
    internalArgProps: PlasmicCheckbox__ArgProps,

    useBehavior
  }
);

export default PlasmicCheckbox;
/* prettier-ignore-end */

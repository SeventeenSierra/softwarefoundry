// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: gqxPS4AgvrvZFiLQ3PbJ65
// Component: 2a-lavT3QPYI

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import { ThemeValue, useTheme } from "./PlasmicGlobalVariant__Theme"; // plasmic-import: m_egzTR6DfJ9/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_app_starter_hostless_no_auth_test_css from "../app_starter_hostless_no_auth_test/plasmic_app_starter_hostless_no_auth_test.module.css"; // plasmic-import: waVhN6sKC41JduCkjZHFuq/projectcss
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic_software_foundry.module.css"; // plasmic-import: gqxPS4AgvrvZFiLQ3PbJ65/projectcss
import sty from "./PlasmicCollapse.module.css"; // plasmic-import: 2a-lavT3QPYI/css

import ChevronDownsvgIcon from "./icons/PlasmicIcon__ChevronDownsvg"; // plasmic-import: gWqdQmY6KmVF/icon

createPlasmicElementProxy;

export type PlasmicCollapse__VariantMembers = {
  open: "open";
};
export type PlasmicCollapse__VariantsArgs = {
  open?: SingleBooleanChoiceArg<"open">;
};
type VariantPropType = keyof PlasmicCollapse__VariantsArgs;
export const PlasmicCollapse__VariantProps = new Array<VariantPropType>("open");

export type PlasmicCollapse__ArgsType = {
  children?: React.ReactNode;
  slot?: React.ReactNode;
  slot2?: React.ReactNode;
  isOpen?: (event: any) => void;
};
type ArgPropType = keyof PlasmicCollapse__ArgsType;
export const PlasmicCollapse__ArgProps = new Array<ArgPropType>(
  "children",
  "slot",
  "slot2",
  "isOpen"
);

export type PlasmicCollapse__OverridesType = {
  root?: p.Flex<"div">;
};

export interface DefaultCollapseProps {
  children?: React.ReactNode;
  slot?: React.ReactNode;
  slot2?: React.ReactNode;
  isOpen?: (event: any) => void;
  open?: SingleBooleanChoiceArg<"open">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicCollapse__RenderFunc(props: {
  variants: PlasmicCollapse__VariantsArgs;
  args: PlasmicCollapse__ArgsType;
  overrides: PlasmicCollapse__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof p.useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "open",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.open
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = p.useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    theme: useTheme()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_app_starter_hostless_no_auth_test_css.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.root,
        {
          [projectcss.global_theme_dark]: hasVariant(
            globalVariants,
            "theme",
            "dark"
          ),
          [sty.rootopen]: hasVariant($state, "open", "open")
        }
      )}
    >
      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox___7XAl8, {
          [sty.freeBoxopen___7XAl8SzxmY]: hasVariant($state, "open", "open")
        })}
      >
        <div className={classNames(projectcss.all, sty.freeBox___6Bh6X)}>
          {p.renderPlasmicSlot({
            defaultContents: (
              <ChevronDownsvgIcon
                className={classNames(projectcss.all, sty.svg__iL5Oi)}
                role={"img"}
              />
            ),

            value: args.slot2
          })}
        </div>
        <div className={classNames(projectcss.all, sty.freeBox__aOkdZ)}>
          <div className={classNames(projectcss.all, sty.freeBox___6WRiS)}>
            {p.renderPlasmicSlot({
              defaultContents: "Enter some text",
              value: args.slot,
              className: classNames(sty.slotTargetSlot)
            })}
          </div>
        </div>
      </p.Stack>
      <div
        className={classNames(projectcss.all, sty.freeBox__zx9W5, {
          [sty.freeBoxopen__zx9W5SzxmY]: hasVariant($state, "open", "open")
        })}
      >
        {(hasVariant($state, "open", "open") ? true : false)
          ? p.renderPlasmicSlot({
              defaultContents: (
                <div
                  className={classNames(projectcss.all, sty.freeBox__hX4Hq, {
                    [sty.freeBoxopen__hX4HqSzxmY]: hasVariant(
                      $state,
                      "open",
                      "open"
                    )
                  })}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___6W7Z2
                    )}
                  >
                    {"Enter some text"}
                  </div>
                </div>
              ),
              value: args.children
            })
          : null}
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicCollapse__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicCollapse__VariantsArgs;
    args?: PlasmicCollapse__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicCollapse__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicCollapse__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicCollapse__ArgProps,
          internalVariantPropNames: PlasmicCollapse__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicCollapse__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCollapse";
  } else {
    func.displayName = `PlasmicCollapse.${nodeName}`;
  }
  return func;
}

export const PlasmicCollapse = Object.assign(
  // Top-level PlasmicCollapse renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicCollapse
    internalVariantProps: PlasmicCollapse__VariantProps,
    internalArgProps: PlasmicCollapse__ArgProps
  }
);

export default PlasmicCollapse;
/* prettier-ignore-end */

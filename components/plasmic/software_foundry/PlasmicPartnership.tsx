// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: gqxPS4AgvrvZFiLQ3PbJ65
// Component: QEGzR34ZtkQT

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import PageLayout from "../../PageLayout"; // plasmic-import: xGklKYpUUGMg/component
import Button from "../../Button"; // plasmic-import: 3WK9FRVCXJcs/component
import NavigationBar from "../../NavigationBar"; // plasmic-import: JQmM1UuIubiQ/component
import Logo from "../../Logo"; // plasmic-import: No_gtKjzaEYA/component
import Footer from "../../Footer"; // plasmic-import: Q20KHtWWjNMw/component

import { useScreenVariants as useScreenVariantsqdQm7NvRVzjp } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: QdQM7NvRVzjp/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_app_starter_hostless_no_auth_test_css from "../app_starter_hostless_no_auth_test/plasmic_app_starter_hostless_no_auth_test.module.css"; // plasmic-import: waVhN6sKC41JduCkjZHFuq/projectcss
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic_software_foundry.module.css"; // plasmic-import: gqxPS4AgvrvZFiLQ3PbJ65/projectcss
import sty from "./PlasmicPartnership.module.css"; // plasmic-import: QEGzR34ZtkQT/css

import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: PYMRdTdCHSju/icon
import IconmonstrRefresh1SvgIcon from "./icons/PlasmicIcon__IconmonstrRefresh1Svg"; // plasmic-import: WhpeF1cGeUrK/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: QI7Bkirsjidh/icon

createPlasmicElementProxy;

export type PlasmicPartnership__VariantMembers = {};
export type PlasmicPartnership__VariantsArgs = {};
type VariantPropType = keyof PlasmicPartnership__VariantsArgs;
export const PlasmicPartnership__VariantProps = new Array<VariantPropType>();

export type PlasmicPartnership__ArgsType = {};
type ArgPropType = keyof PlasmicPartnership__ArgsType;
export const PlasmicPartnership__ArgProps = new Array<ArgPropType>();

export type PlasmicPartnership__OverridesType = {
  root?: p.Flex<"section">;
  pageLayout?: p.Flex<typeof PageLayout>;
  pageBanerSection?: p.Flex<"div">;
  section?: p.Flex<"section">;
  img?: p.Flex<typeof p.PlasmicImg>;
  formContainer2?: p.Flex<"div">;
  textbox?: p.Flex<"input">;
  textbox3?: p.Flex<"input">;
  textarea?: p.Flex<"textarea">;
  navigationBar?: p.Flex<typeof NavigationBar>;
};

export interface DefaultPartnershipProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicPartnership__RenderFunc(props: {
  variants: PlasmicPartnership__VariantsArgs;
  args: PlasmicPartnership__ArgsType;
  overrides: PlasmicPartnership__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof p.useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "textbox.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "textbox3.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "textarea.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = p.useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsqdQm7NvRVzjp()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <section
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_app_starter_hostless_no_auth_test_css.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            sty.root
          )}
        >
          <PageLayout
            data-plasmic-name={"pageLayout"}
            data-plasmic-override={overrides.pageLayout}
            className={classNames("__wab_instance", sty.pageLayout)}
            slot={
              <NavigationBar
                data-plasmic-name={"navigationBar"}
                data-plasmic-override={overrides.navigationBar}
                className={classNames("__wab_instance", sty.navigationBar)}
              >
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__rm4Du)}
                >
                  <Button
                    className={classNames("__wab_instance", sty.button__nkocO)}
                    color={"link"}
                    link={`/`}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__mwNcs
                      )}
                    >
                      {"Home"}
                    </div>
                  </Button>
                  <Button
                    className={classNames("__wab_instance", sty.button__eJsGr)}
                    color={"clear"}
                    link={`/partnership`}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__pWuN
                      )}
                    >
                      {"Try Demo"}
                    </div>
                  </Button>
                  <Button
                    className={classNames("__wab_instance", sty.button___05Vqs)}
                    color={"primary"}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___6QyAo
                      )}
                    >
                      {"Become a Partner"}
                    </div>
                  </Button>
                </p.Stack>
              </NavigationBar>
            }
          >
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__dTiQj)}
            >
              <div
                data-plasmic-name={"pageBanerSection"}
                data-plasmic-override={overrides.pageBanerSection}
                className={classNames(projectcss.all, sty.pageBanerSection)}
              >
                <div
                  className={classNames(projectcss.all, sty.freeBox___4QZ5T)}
                >
                  <h1
                    className={classNames(
                      projectcss.all,
                      projectcss.h1,
                      projectcss.__wab_text,
                      sty.h1__bvS6A
                    )}
                  >
                    {"get in line for the Professional Planner"}
                  </h1>
                </div>
              </div>
              <section
                data-plasmic-name={"section"}
                data-plasmic-override={overrides.section}
                className={classNames(projectcss.all, sty.section)}
              >
                <div
                  className={classNames(projectcss.all, sty.freeBox___08Nfr)}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__xg2WX)}
                  >
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__gCjlA)}
                    >
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.columns__ykvPw
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.column___1YUwN
                          )}
                        >
                          <p.PlasmicImg
                            data-plasmic-name={"img"}
                            data-plasmic-override={overrides.img}
                            alt={""}
                            className={classNames(sty.img)}
                            displayHeight={"100%"}
                            displayMaxHeight={"none"}
                            displayMaxWidth={"100%"}
                            displayMinHeight={"0"}
                            displayMinWidth={"0"}
                            displayWidth={"100%"}
                            loading={"lazy"}
                            src={
                              "https://cdn.pixabay.com/photo/2018/04/07/13/11/medicine-3298451_1280.jpg"
                            }
                          />
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.column___4HV8F
                          )}
                        >
                          <p.Stack
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__ynsN
                            )}
                          >
                            <h1
                              className={classNames(
                                projectcss.all,
                                projectcss.h1,
                                projectcss.__wab_text,
                                sty.h1__fBwJi
                              )}
                            >
                              {"Sign up TO BECOME A PARTNER"}
                            </h1>
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__ucuKv
                              )}
                            >
                              {
                                "Software Foundry is more than a platform; it's a mission to drive positive change in the world of technology. As a partner, your contributions help shape a more secure, efficient, and innovative digital future, benefiting a global community of development, security and operations all in a single location."
                              }
                            </div>
                            <p.Stack
                              as={"div"}
                              data-plasmic-name={"formContainer2"}
                              data-plasmic-override={overrides.formContainer2}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.formContainer2
                              )}
                            >
                              <p.Stack
                                as={"div"}
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  sty.columns__kTTh8
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.column__fdb7Q
                                  )}
                                >
                                  <input
                                    data-plasmic-name={"textbox"}
                                    data-plasmic-override={overrides.textbox}
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.input,
                                      sty.textbox
                                    )}
                                    onChange={e => {
                                      p.generateStateOnChangeProp($state, [
                                        "textbox",
                                        "value"
                                      ])(e.target.value);
                                    }}
                                    placeholder={"First name"}
                                    ref={ref => {
                                      $refs["textbox"] = ref;
                                    }}
                                    size={1}
                                    type={"text"}
                                    value={
                                      p.generateStateValueProp($state, [
                                        "textbox",
                                        "value"
                                      ]) ?? ""
                                    }
                                  />
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.column__w49By
                                  )}
                                >
                                  <input
                                    data-plasmic-name={"textbox3"}
                                    data-plasmic-override={overrides.textbox3}
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.input,
                                      sty.textbox3
                                    )}
                                    onChange={e => {
                                      p.generateStateOnChangeProp($state, [
                                        "textbox3",
                                        "value"
                                      ])(e.target.value);
                                    }}
                                    placeholder={"Email address"}
                                    ref={ref => {
                                      $refs["textbox3"] = ref;
                                    }}
                                    size={1}
                                    type={"text"}
                                    value={
                                      p.generateStateValueProp($state, [
                                        "textbox3",
                                        "value"
                                      ]) ?? ""
                                    }
                                  />
                                </div>
                              </p.Stack>
                              <p.Stack
                                as={"div"}
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  sty.columns__exNws
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.column__wbgyp
                                  )}
                                >
                                  <textarea
                                    data-plasmic-name={"textarea"}
                                    data-plasmic-override={overrides.textarea}
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.textarea,
                                      sty.textarea
                                    )}
                                    onChange={e => {
                                      p.generateStateOnChangeProp($state, [
                                        "textarea",
                                        "value"
                                      ])(e.target.value);
                                    }}
                                    placeholder={"Message"}
                                    ref={ref => {
                                      $refs["textarea"] = ref;
                                    }}
                                    value={
                                      p.generateStateValueProp($state, [
                                        "textarea",
                                        "value"
                                      ]) ?? ""
                                    }
                                  />

                                  <Button
                                    className={classNames(
                                      "__wab_instance",
                                      sty.button__lBwGm
                                    )}
                                    color={"secondary"}
                                    endIcon={
                                      <ChecksvgIcon
                                        className={classNames(
                                          projectcss.all,
                                          sty.svg__ccary
                                        )}
                                        role={"img"}
                                      />
                                    }
                                    startIcon={
                                      <ChecksvgIcon
                                        className={classNames(
                                          projectcss.all,
                                          sty.svg__a3ULs
                                        )}
                                        role={"img"}
                                      />
                                    }
                                    submitsForm={true}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__p7I5L
                                      )}
                                    >
                                      {"Send Message"}
                                    </div>
                                  </Button>
                                </div>
                              </p.Stack>
                            </p.Stack>
                          </p.Stack>
                        </div>
                      </p.Stack>
                    </p.Stack>
                  </div>
                </div>
              </section>
            </p.Stack>
          </PageLayout>
        </section>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "pageLayout",
    "pageBanerSection",
    "section",
    "img",
    "formContainer2",
    "textbox",
    "textbox3",
    "textarea",
    "navigationBar"
  ],
  pageLayout: [
    "pageLayout",
    "pageBanerSection",
    "section",
    "img",
    "formContainer2",
    "textbox",
    "textbox3",
    "textarea",
    "navigationBar"
  ],
  pageBanerSection: ["pageBanerSection"],
  section: [
    "section",
    "img",
    "formContainer2",
    "textbox",
    "textbox3",
    "textarea"
  ],
  img: ["img"],
  formContainer2: ["formContainer2", "textbox", "textbox3", "textarea"],
  textbox: ["textbox"],
  textbox3: ["textbox3"],
  textarea: ["textarea"],
  navigationBar: ["navigationBar"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "section";
  pageLayout: typeof PageLayout;
  pageBanerSection: "div";
  section: "section";
  img: typeof p.PlasmicImg;
  formContainer2: "div";
  textbox: "input";
  textbox3: "input";
  textarea: "textarea";
  navigationBar: typeof NavigationBar;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicPartnership__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicPartnership__VariantsArgs;
    args?: PlasmicPartnership__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicPartnership__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicPartnership__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicPartnership__ArgProps,
          internalVariantPropNames: PlasmicPartnership__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicPartnership__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicPartnership";
  } else {
    func.displayName = `PlasmicPartnership.${nodeName}`;
  }
  return func;
}

export const PlasmicPartnership = Object.assign(
  // Top-level PlasmicPartnership renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    pageLayout: makeNodeComponent("pageLayout"),
    pageBanerSection: makeNodeComponent("pageBanerSection"),
    section: makeNodeComponent("section"),
    img: makeNodeComponent("img"),
    formContainer2: makeNodeComponent("formContainer2"),
    textbox: makeNodeComponent("textbox"),
    textbox3: makeNodeComponent("textbox3"),
    textarea: makeNodeComponent("textarea"),
    navigationBar: makeNodeComponent("navigationBar"),

    // Metadata about props expected for PlasmicPartnership
    internalVariantProps: PlasmicPartnership__VariantProps,
    internalArgProps: PlasmicPartnership__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicPartnership;
/* prettier-ignore-end */

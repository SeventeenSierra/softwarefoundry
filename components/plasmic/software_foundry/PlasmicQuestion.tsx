// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: gqxPS4AgvrvZFiLQ3PbJ65
// Component: 1nyIJTsPqoBJ

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Card from "../../Card"; // plasmic-import: 6sSbjuHfVQ0X/component
import Button from "../../Button"; // plasmic-import: 3WK9FRVCXJcs/component

import { useScreenVariants as useScreenVariantsqdQm7NvRVzjp } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: QdQM7NvRVzjp/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_app_starter_hostless_no_auth_test_css from "../app_starter_hostless_no_auth_test/plasmic_app_starter_hostless_no_auth_test.module.css"; // plasmic-import: waVhN6sKC41JduCkjZHFuq/projectcss
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic_software_foundry.module.css"; // plasmic-import: gqxPS4AgvrvZFiLQ3PbJ65/projectcss
import sty from "./PlasmicQuestion.module.css"; // plasmic-import: 1nyIJTsPqoBJ/css

import IconmonstrRefresh1SvgIcon from "./icons/PlasmicIcon__IconmonstrRefresh1Svg"; // plasmic-import: WhpeF1cGeUrK/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: QI7Bkirsjidh/icon

createPlasmicElementProxy;

export type PlasmicQuestion__VariantMembers = {};
export type PlasmicQuestion__VariantsArgs = {};
type VariantPropType = keyof PlasmicQuestion__VariantsArgs;
export const PlasmicQuestion__VariantProps = new Array<VariantPropType>();

export type PlasmicQuestion__ArgsType = {
  children3?: React.ReactNode;
  children2?: React.ReactNode;
  children?: React.ReactNode;
  slot?: React.ReactNode;
  slot2?: React.ReactNode;
  slot3?: React.ReactNode;
};
type ArgPropType = keyof PlasmicQuestion__ArgsType;
export const PlasmicQuestion__ArgProps = new Array<ArgPropType>(
  "children3",
  "children2",
  "children",
  "slot",
  "slot2",
  "slot3"
);

export type PlasmicQuestion__OverridesType = {
  root?: p.Flex<"div">;
  h1?: p.Flex<"h1">;
  h3?: p.Flex<"h3">;
};

export interface DefaultQuestionProps {
  children3?: React.ReactNode;
  children2?: React.ReactNode;
  children?: React.ReactNode;
  slot?: React.ReactNode;
  slot2?: React.ReactNode;
  slot3?: React.ReactNode;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicQuestion__RenderFunc(props: {
  variants: PlasmicQuestion__VariantsArgs;
  args: PlasmicQuestion__ArgsType;
  overrides: PlasmicQuestion__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsqdQm7NvRVzjp()
  });

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_app_starter_hostless_no_auth_test_css.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.root
      )}
    >
      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox___3Jrmh)}
      >
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__cllY)}
        >
          <h1
            data-plasmic-name={"h1"}
            data-plasmic-override={overrides.h1}
            className={classNames(projectcss.all, projectcss.h1, sty.h1)}
          >
            {p.renderPlasmicSlot({
              defaultContents: "Employment Status",
              value: args.slot,
              className: classNames(sty.slotTargetSlot)
            })}
          </h1>
          <h3
            data-plasmic-name={"h3"}
            data-plasmic-override={overrides.h3}
            className={classNames(projectcss.all, projectcss.h3, sty.h3)}
          >
            {p.renderPlasmicSlot({
              defaultContents: "Pick an employment status tenure ",
              value: args.slot2,
              className: classNames(sty.slotTargetSlot2)
            })}
          </h3>
        </p.Stack>
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox___7VphM)}
        >
          {p.renderPlasmicSlot({
            defaultContents: (
              <Card
                className={classNames("__wab_instance", sty.card__mDAx)}
                slot={"Long Term Employee"}
                slot2={
                  "An employee that at least 15 years of employment at an organization. "
                }
              >
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__sOl2Y)}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"auto"}
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/software_foundry/images/successFactorsPanasvg.svg",
                    fullWidth: 150,
                    fullHeight: 150,
                    aspectRatio: 1
                  }}
                />
              </Card>
            ),
            value: args.children3
          })}
          {p.renderPlasmicSlot({
            defaultContents: (
              <Card
                className={classNames("__wab_instance", sty.card___1BJbZ)}
                slot={"Mid Term Employee"}
                slot2={
                  "An employee that has 3-15 years of employment at an organization. "
                }
              >
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__chdDs)}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"auto"}
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/software_foundry/images/businessVisionPanasvg.svg",
                    fullWidth: 150,
                    fullHeight: 150,
                    aspectRatio: 1
                  }}
                />
              </Card>
            ),
            value: args.children2
          })}
          {p.renderPlasmicSlot({
            defaultContents: (
              <Card
                className={classNames("__wab_instance", sty.card__pxovK)}
                slot={"New Employee"}
              />
            ),

            value: args.children
          })}
        </p.Stack>
        {p.renderPlasmicSlot({
          defaultContents: (
            <Button
              className={classNames("__wab_instance", sty.button__qfUv8)}
              color={"coolAccentHigh"}
            >
              {"Next"}
            </Button>
          ),
          value: args.slot3
        })}
      </p.Stack>
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "h1", "h3"],
  h1: ["h1"],
  h3: ["h3"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  h1: "h1";
  h3: "h3";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicQuestion__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicQuestion__VariantsArgs;
    args?: PlasmicQuestion__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicQuestion__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicQuestion__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicQuestion__ArgProps,
          internalVariantPropNames: PlasmicQuestion__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicQuestion__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicQuestion";
  } else {
    func.displayName = `PlasmicQuestion.${nodeName}`;
  }
  return func;
}

export const PlasmicQuestion = Object.assign(
  // Top-level PlasmicQuestion renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    h1: makeNodeComponent("h1"),
    h3: makeNodeComponent("h3"),

    // Metadata about props expected for PlasmicQuestion
    internalVariantProps: PlasmicQuestion__VariantProps,
    internalArgProps: PlasmicQuestion__ArgProps
  }
);

export default PlasmicQuestion;
/* prettier-ignore-end */

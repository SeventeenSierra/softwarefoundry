// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: gqxPS4AgvrvZFiLQ3PbJ65
// Component: Cv9BEflFEWoE

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import { useScreenVariants as useScreenVariantsqdQm7NvRVzjp } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: QdQM7NvRVzjp/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_app_starter_hostless_no_auth_test_css from "../app_starter_hostless_no_auth_test/plasmic_app_starter_hostless_no_auth_test.module.css"; // plasmic-import: waVhN6sKC41JduCkjZHFuq/projectcss
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic_software_foundry.module.css"; // plasmic-import: gqxPS4AgvrvZFiLQ3PbJ65/projectcss
import sty from "./PlasmicStepper.module.css"; // plasmic-import: Cv9BEflFEWoE/css

createPlasmicElementProxy;

export type PlasmicStepper__VariantMembers = {};
export type PlasmicStepper__VariantsArgs = {};
type VariantPropType = keyof PlasmicStepper__VariantsArgs;
export const PlasmicStepper__VariantProps = new Array<VariantPropType>();

export type PlasmicStepper__ArgsType = {};
type ArgPropType = keyof PlasmicStepper__ArgsType;
export const PlasmicStepper__ArgProps = new Array<ArgPropType>();

export type PlasmicStepper__OverridesType = {
  root?: p.Flex<"div">;
};

export interface DefaultStepperProps {
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicStepper__RenderFunc(props: {
  variants: PlasmicStepper__VariantsArgs;
  args: PlasmicStepper__ArgsType;
  overrides: PlasmicStepper__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsqdQm7NvRVzjp()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_app_starter_hostless_no_auth_test_css.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.root
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox__m7B8A)}>
        <h2
          className={classNames(
            projectcss.all,
            projectcss.h2,
            projectcss.__wab_text,
            sty.h2__wamps
          )}
        >
          {"How it work"}
        </h2>
        <div className={classNames(projectcss.all, sty.freeBox__fVW9)}>
          <div className={classNames(projectcss.all, sty.freeBox__b7Z14)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__m1ME
              )}
            >
              {"ONE"}
            </div>
            <h2
              className={classNames(
                projectcss.all,
                projectcss.h2,
                projectcss.__wab_text,
                sty.h2__kzdk0
              )}
            >
              {"1"}
            </h2>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__wxGlD
              )}
            >
              {"Save"}
            </div>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__fupOc
              )}
            >
              {"First, let us get to know you. Save the lamp styles you love."}
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__bw3Tr)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__eL9Yo
              )}
            >
              {"TWO"}
            </div>
            <h2
              className={classNames(
                projectcss.all,
                projectcss.h2,
                projectcss.__wab_text,
                sty.h2___1Yh4L
              )}
            >
              {"2"}
            </h2>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___9Wy3
              )}
            >
              {"Save"}
            </div>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__ftRs
              )}
            >
              {"First, let us get to know you. Save the lamp styles you love."}
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__iKgQu)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__dkRdy
              )}
            >
              {"THREE"}
            </div>
            <h2
              className={classNames(
                projectcss.all,
                projectcss.h2,
                projectcss.__wab_text,
                sty.h2__xaSpu
              )}
            >
              {"3"}
            </h2>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__qhv72
              )}
            >
              {"Save"}
            </div>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__tx4MU
              )}
            >
              {"First, let us get to know you. Save the lamp styles you love."}
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__pVz9P)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__oQlJl
              )}
            >
              {"FOUR"}
            </div>
            <h2
              className={classNames(
                projectcss.all,
                projectcss.h2,
                projectcss.__wab_text,
                sty.h2__x0Lep
              )}
            >
              {"4"}
            </h2>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__lNvVa
              )}
            >
              {"Save"}
            </div>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__ewe7L
              )}
            >
              {"First, let us get to know you. Save the lamp styles you love."}
            </div>
          </div>
        </div>
      </div>
      <div className={classNames(projectcss.all, sty.freeBox___1BbJe)}>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__nkPn
          )}
        >
          {"CONTENT 30"}
        </div>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicStepper__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicStepper__VariantsArgs;
    args?: PlasmicStepper__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicStepper__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicStepper__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicStepper__ArgProps,
          internalVariantPropNames: PlasmicStepper__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicStepper__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicStepper";
  } else {
    func.displayName = `PlasmicStepper.${nodeName}`;
  }
  return func;
}

export const PlasmicStepper = Object.assign(
  // Top-level PlasmicStepper renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicStepper
    internalVariantProps: PlasmicStepper__VariantProps,
    internalArgProps: PlasmicStepper__ArgProps
  }
);

export default PlasmicStepper;
/* prettier-ignore-end */

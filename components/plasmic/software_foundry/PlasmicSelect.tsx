// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: gqxPS4AgvrvZFiLQ3PbJ65
// Component: xkQQWycy2V6D

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import * as pp from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Select__Overlay from "../../Select__Overlay"; // plasmic-import: -Gt3h2PpjHGd/component
import Select__Option from "../../Select__Option"; // plasmic-import: 8HxlY0U-7Am0/component
import Select__OptionGroup from "../../Select__OptionGroup"; // plasmic-import: aZiADhfS3E6a/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_app_starter_hostless_no_auth_test_css from "../app_starter_hostless_no_auth_test/plasmic_app_starter_hostless_no_auth_test.module.css"; // plasmic-import: waVhN6sKC41JduCkjZHFuq/projectcss
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic_software_foundry.module.css"; // plasmic-import: gqxPS4AgvrvZFiLQ3PbJ65/projectcss
import sty from "./PlasmicSelect.module.css"; // plasmic-import: xkQQWycy2V6D/css

import ChevronDownsvgIcon from "./icons/PlasmicIcon__ChevronDownsvg"; // plasmic-import: gWqdQmY6KmVF/icon
import ChevronUpsvgIcon from "./icons/PlasmicIcon__ChevronUpsvg"; // plasmic-import: TFG2Oh3EVNL6/icon

createPlasmicElementProxy;

export type PlasmicSelect__VariantMembers = {
  showPlaceholder: "showPlaceholder";
  isOpen: "isOpen";
  isDisabled: "isDisabled";
  color:
    | "clear"
    | "successLow"
    | "successHigh"
    | "infoHigh"
    | "infoLow"
    | "errorLow"
    | "errorHigh"
    | "warningLow"
    | "warningHigh"
    | "accentCoolHigh"
    | "accentCoolLow"
    | "accentWarmLow"
    | "accentWarmHigh"
    | "primaryLow"
    | "primaryHigh"
    | "secondaryLow"
    | "secondaryHigh"
    | "error"
    | "info"
    | "warning"
    | "success"
    | "primary"
    | "secondary"
    | "accentCool"
    | "accentWarm";
};
export type PlasmicSelect__VariantsArgs = {
  showPlaceholder?: SingleBooleanChoiceArg<"showPlaceholder">;
  isOpen?: SingleBooleanChoiceArg<"isOpen">;
  isDisabled?: SingleBooleanChoiceArg<"isDisabled">;
  color?: SingleChoiceArg<
    | "clear"
    | "successLow"
    | "successHigh"
    | "infoHigh"
    | "infoLow"
    | "errorLow"
    | "errorHigh"
    | "warningLow"
    | "warningHigh"
    | "accentCoolHigh"
    | "accentCoolLow"
    | "accentWarmLow"
    | "accentWarmHigh"
    | "primaryLow"
    | "primaryHigh"
    | "secondaryLow"
    | "secondaryHigh"
    | "error"
    | "info"
    | "warning"
    | "success"
    | "primary"
    | "secondary"
    | "accentCool"
    | "accentWarm"
  >;
};
type VariantPropType = keyof PlasmicSelect__VariantsArgs;
export const PlasmicSelect__VariantProps = new Array<VariantPropType>(
  "showPlaceholder",
  "isOpen",
  "isDisabled",
  "color"
);

export type PlasmicSelect__ArgsType = {
  selectedContent?: React.ReactNode;
  placeholder?: React.ReactNode;
  children?: React.ReactNode;
  value?: "Dynamic options";
  name?: string;
  "aria-label"?: string;
  "aria-labelledby"?: string;
  options?: any;
  onChange?: (value: string) => void;
};
type ArgPropType = keyof PlasmicSelect__ArgsType;
export const PlasmicSelect__ArgProps = new Array<ArgPropType>(
  "selectedContent",
  "placeholder",
  "children",
  "value",
  "name",
  "aria-label",
  "aria-labelledby",
  "options",
  "onChange"
);

export type PlasmicSelect__OverridesType = {
  root?: p.Flex<"div">;
  trigger?: p.Flex<"button">;
  contentContainer?: p.Flex<"div">;
  dropdownIcon?: p.Flex<"svg">;
  overlay?: p.Flex<typeof Select__Overlay>;
  optionsContainer?: p.Flex<"div">;
};

export interface DefaultSelectProps extends pp.BaseSelectProps {
  "aria-label"?: string;
  "aria-labelledby"?: string;
  options?: any;
  onChange?: (value: string) => void;
  color?: SingleChoiceArg<
    | "clear"
    | "successLow"
    | "successHigh"
    | "infoHigh"
    | "infoLow"
    | "errorLow"
    | "errorHigh"
    | "warningLow"
    | "warningHigh"
    | "accentCoolHigh"
    | "accentCoolLow"
    | "accentWarmLow"
    | "accentWarmHigh"
    | "primaryLow"
    | "primaryHigh"
    | "secondaryLow"
    | "secondaryHigh"
    | "error"
    | "info"
    | "warning"
    | "success"
    | "primary"
    | "secondary"
    | "accentCool"
    | "accentWarm"
  >;
}

const PlasmicSelectContext = React.createContext<
  | undefined
  | { variants: PlasmicSelect__VariantsArgs; args: PlasmicSelect__ArgsType }
>(undefined);

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicSelect__RenderFunc(props: {
  variants: PlasmicSelect__VariantsArgs;
  args: PlasmicSelect__ArgsType;
  overrides: PlasmicSelect__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof p.useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "showPlaceholder",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.showPlaceholder
      },
      {
        path: "isOpen",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.isOpen
      },
      {
        path: "isDisabled",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.isDisabled
      },
      {
        path: "color",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.color
      },
      {
        path: "value",
        type: "writable",
        variableType: "text",

        valueProp: "value",
        onChangeProp: "onChange"
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = p.useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const [isRootFocusVisibleWithin, triggerRootFocusVisibleWithinProps] =
    useTrigger("useFocusVisibleWithin", {
      isTextInput: false
    });
  const triggers = {
    focusVisibleWithin_root: isRootFocusVisibleWithin
  };

  return (
    <PlasmicSelectContext.Provider value={{ variants, args }}>
      <div
        data-plasmic-name={"root"}
        data-plasmic-override={overrides.root}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        className={classNames(
          projectcss.all,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          projectcss.plasmic_tokens,
          plasmic_app_starter_hostless_no_auth_test_css.plasmic_tokens,
          plasmic_antd_5_hostless_css.plasmic_tokens,
          sty.root,
          {
            [sty.root___focusVisibleWithin]: triggers.focusVisibleWithin_root,
            [sty.rootcolor_clear]: hasVariant($state, "color", "clear"),
            [sty.rootcolor_primary]: hasVariant($state, "color", "primary"),
            [sty.rootcolor_successLow]: hasVariant(
              $state,
              "color",
              "successLow"
            ),
            [sty.rootisOpen]: hasVariant($state, "isOpen", "isOpen")
          }
        )}
        data-plasmic-trigger-props={[triggerRootFocusVisibleWithinProps]}
      >
        <button
          data-plasmic-name={"trigger"}
          data-plasmic-override={overrides.trigger}
          className={classNames(
            projectcss.all,
            projectcss.button,
            sty.trigger,
            {
              [sty.trigger___focusVisibleWithin]:
                triggers.focusVisibleWithin_root,
              [sty.triggercolor_accentCoolHigh]: hasVariant(
                $state,
                "color",
                "accentCoolHigh"
              ),
              [sty.triggercolor_accentCoolLow]: hasVariant(
                $state,
                "color",
                "accentCoolLow"
              ),
              [sty.triggercolor_accentCool]: hasVariant(
                $state,
                "color",
                "accentCool"
              ),
              [sty.triggercolor_accentWarmHigh]: hasVariant(
                $state,
                "color",
                "accentWarmHigh"
              ),
              [sty.triggercolor_accentWarmLow]: hasVariant(
                $state,
                "color",
                "accentWarmLow"
              ),
              [sty.triggercolor_accentWarm]: hasVariant(
                $state,
                "color",
                "accentWarm"
              ),
              [sty.triggercolor_clear]: hasVariant($state, "color", "clear"),
              [sty.triggercolor_errorHigh]: hasVariant(
                $state,
                "color",
                "errorHigh"
              ),
              [sty.triggercolor_errorLow]: hasVariant(
                $state,
                "color",
                "errorLow"
              ),
              [sty.triggercolor_error]: hasVariant($state, "color", "error"),
              [sty.triggercolor_infoHigh]: hasVariant(
                $state,
                "color",
                "infoHigh"
              ),
              [sty.triggercolor_infoLow]: hasVariant(
                $state,
                "color",
                "infoLow"
              ),
              [sty.triggercolor_info]: hasVariant($state, "color", "info"),
              [sty.triggercolor_primaryHigh]: hasVariant(
                $state,
                "color",
                "primaryHigh"
              ),
              [sty.triggercolor_primaryLow]: hasVariant(
                $state,
                "color",
                "primaryLow"
              ),
              [sty.triggercolor_primary]: hasVariant(
                $state,
                "color",
                "primary"
              ),
              [sty.triggercolor_secondaryHigh]: hasVariant(
                $state,
                "color",
                "secondaryHigh"
              ),
              [sty.triggercolor_secondaryLow]: hasVariant(
                $state,
                "color",
                "secondaryLow"
              ),
              [sty.triggercolor_secondary]: hasVariant(
                $state,
                "color",
                "secondary"
              ),
              [sty.triggercolor_successHigh]: hasVariant(
                $state,
                "color",
                "successHigh"
              ),
              [sty.triggercolor_successLow]: hasVariant(
                $state,
                "color",
                "successLow"
              ),
              [sty.triggercolor_success]: hasVariant(
                $state,
                "color",
                "success"
              ),
              [sty.triggercolor_warningHigh]: hasVariant(
                $state,
                "color",
                "warningHigh"
              ),
              [sty.triggercolor_warningLow]: hasVariant(
                $state,
                "color",
                "warningLow"
              ),
              [sty.triggercolor_warning]: hasVariant(
                $state,
                "color",
                "warning"
              ),
              [sty.triggerisDisabled]: hasVariant(
                $state,
                "isDisabled",
                "isDisabled"
              ),
              [sty.triggerisOpen]: hasVariant($state, "isOpen", "isOpen")
            }
          )}
          disabled={
            hasVariant($state, "isDisabled", "isDisabled") ? true : undefined
          }
          ref={ref => {
            $refs["trigger"] = ref;
          }}
        >
          <div
            data-plasmic-name={"contentContainer"}
            data-plasmic-override={overrides.contentContainer}
            className={classNames(projectcss.all, sty.contentContainer, {
              [sty.contentContainerisDisabled]: hasVariant(
                $state,
                "isDisabled",
                "isDisabled"
              ),
              [sty.contentContainershowPlaceholder]: hasVariant(
                $state,
                "showPlaceholder",
                "showPlaceholder"
              )
            })}
          >
            {(
              hasVariant($state, "showPlaceholder", "showPlaceholder")
                ? false
                : true
            )
              ? p.renderPlasmicSlot({
                  defaultContents: "Selected",
                  value: args.selectedContent,
                  className: classNames(sty.slotTargetSelectedContent, {
                    [sty.slotTargetSelectedContentisDisabled]: hasVariant(
                      $state,
                      "isDisabled",
                      "isDisabled"
                    ),
                    [sty.slotTargetSelectedContentisOpen]: hasVariant(
                      $state,
                      "isOpen",
                      "isOpen"
                    ),
                    [sty.slotTargetSelectedContentshowPlaceholder]: hasVariant(
                      $state,
                      "showPlaceholder",
                      "showPlaceholder"
                    )
                  })
                })
              : null}
            {(
              hasVariant($state, "showPlaceholder", "showPlaceholder")
                ? true
                : (() => {
                    try {
                      return !$state.value;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return false;
                      }
                      throw e;
                    }
                  })()
            )
              ? p.renderPlasmicSlot({
                  defaultContents: "Select\u2026",
                  value: args.placeholder,
                  className: classNames(sty.slotTargetPlaceholder, {
                    [sty.slotTargetPlaceholdercolor_accentCoolHigh]: hasVariant(
                      $state,
                      "color",
                      "accentCoolHigh"
                    ),
                    [sty.slotTargetPlaceholdercolor_accentCoolLow]: hasVariant(
                      $state,
                      "color",
                      "accentCoolLow"
                    ),
                    [sty.slotTargetPlaceholdercolor_accentCool]: hasVariant(
                      $state,
                      "color",
                      "accentCool"
                    ),
                    [sty.slotTargetPlaceholdercolor_accentWarmHigh]: hasVariant(
                      $state,
                      "color",
                      "accentWarmHigh"
                    ),
                    [sty.slotTargetPlaceholdercolor_accentWarmLow]: hasVariant(
                      $state,
                      "color",
                      "accentWarmLow"
                    ),
                    [sty.slotTargetPlaceholdercolor_accentWarm]: hasVariant(
                      $state,
                      "color",
                      "accentWarm"
                    ),
                    [sty.slotTargetPlaceholdercolor_errorHigh]: hasVariant(
                      $state,
                      "color",
                      "errorHigh"
                    ),
                    [sty.slotTargetPlaceholdercolor_errorLow]: hasVariant(
                      $state,
                      "color",
                      "errorLow"
                    ),
                    [sty.slotTargetPlaceholdercolor_error]: hasVariant(
                      $state,
                      "color",
                      "error"
                    ),
                    [sty.slotTargetPlaceholdercolor_infoHigh]: hasVariant(
                      $state,
                      "color",
                      "infoHigh"
                    ),
                    [sty.slotTargetPlaceholdercolor_infoLow]: hasVariant(
                      $state,
                      "color",
                      "infoLow"
                    ),
                    [sty.slotTargetPlaceholdercolor_info]: hasVariant(
                      $state,
                      "color",
                      "info"
                    ),
                    [sty.slotTargetPlaceholdercolor_primaryHigh]: hasVariant(
                      $state,
                      "color",
                      "primaryHigh"
                    ),
                    [sty.slotTargetPlaceholdercolor_primaryLow]: hasVariant(
                      $state,
                      "color",
                      "primaryLow"
                    ),
                    [sty.slotTargetPlaceholdercolor_primary]: hasVariant(
                      $state,
                      "color",
                      "primary"
                    ),
                    [sty.slotTargetPlaceholdercolor_secondaryHigh]: hasVariant(
                      $state,
                      "color",
                      "secondaryHigh"
                    ),
                    [sty.slotTargetPlaceholdercolor_secondaryLow]: hasVariant(
                      $state,
                      "color",
                      "secondaryLow"
                    ),
                    [sty.slotTargetPlaceholdercolor_secondary]: hasVariant(
                      $state,
                      "color",
                      "secondary"
                    ),
                    [sty.slotTargetPlaceholdercolor_successHigh]: hasVariant(
                      $state,
                      "color",
                      "successHigh"
                    ),
                    [sty.slotTargetPlaceholdercolor_successLow]: hasVariant(
                      $state,
                      "color",
                      "successLow"
                    ),
                    [sty.slotTargetPlaceholdercolor_success]: hasVariant(
                      $state,
                      "color",
                      "success"
                    ),
                    [sty.slotTargetPlaceholdercolor_warningHigh]: hasVariant(
                      $state,
                      "color",
                      "warningHigh"
                    ),
                    [sty.slotTargetPlaceholdercolor_warningLow]: hasVariant(
                      $state,
                      "color",
                      "warningLow"
                    ),
                    [sty.slotTargetPlaceholdercolor_warning]: hasVariant(
                      $state,
                      "color",
                      "warning"
                    ),
                    [sty.slotTargetPlaceholdershowPlaceholder]: hasVariant(
                      $state,
                      "showPlaceholder",
                      "showPlaceholder"
                    )
                  })
                })
              : null}
          </div>
          <p.PlasmicIcon
            data-plasmic-name={"dropdownIcon"}
            data-plasmic-override={overrides.dropdownIcon}
            PlasmicIconType={
              hasVariant($state, "isOpen", "isOpen")
                ? ChevronUpsvgIcon
                : ChevronDownsvgIcon
            }
            className={classNames(projectcss.all, sty.dropdownIcon, {
              [sty.dropdownIcon___focusVisibleWithin]:
                triggers.focusVisibleWithin_root,
              [sty.dropdownIconcolor_accentCoolHigh]: hasVariant(
                $state,
                "color",
                "accentCoolHigh"
              ),
              [sty.dropdownIconcolor_accentCoolLow]: hasVariant(
                $state,
                "color",
                "accentCoolLow"
              ),
              [sty.dropdownIconcolor_accentCool]: hasVariant(
                $state,
                "color",
                "accentCool"
              ),
              [sty.dropdownIconcolor_accentWarmHigh]: hasVariant(
                $state,
                "color",
                "accentWarmHigh"
              ),
              [sty.dropdownIconcolor_accentWarmLow]: hasVariant(
                $state,
                "color",
                "accentWarmLow"
              ),
              [sty.dropdownIconcolor_accentWarm]: hasVariant(
                $state,
                "color",
                "accentWarm"
              ),
              [sty.dropdownIconcolor_errorHigh]: hasVariant(
                $state,
                "color",
                "errorHigh"
              ),
              [sty.dropdownIconcolor_errorLow]: hasVariant(
                $state,
                "color",
                "errorLow"
              ),
              [sty.dropdownIconcolor_error]: hasVariant(
                $state,
                "color",
                "error"
              ),
              [sty.dropdownIconcolor_infoHigh]: hasVariant(
                $state,
                "color",
                "infoHigh"
              ),
              [sty.dropdownIconcolor_infoLow]: hasVariant(
                $state,
                "color",
                "infoLow"
              ),
              [sty.dropdownIconcolor_info]: hasVariant($state, "color", "info"),
              [sty.dropdownIconcolor_primaryHigh]: hasVariant(
                $state,
                "color",
                "primaryHigh"
              ),
              [sty.dropdownIconcolor_primaryLow]: hasVariant(
                $state,
                "color",
                "primaryLow"
              ),
              [sty.dropdownIconcolor_primary]: hasVariant(
                $state,
                "color",
                "primary"
              ),
              [sty.dropdownIconcolor_secondaryHigh]: hasVariant(
                $state,
                "color",
                "secondaryHigh"
              ),
              [sty.dropdownIconcolor_secondaryLow]: hasVariant(
                $state,
                "color",
                "secondaryLow"
              ),
              [sty.dropdownIconcolor_secondary]: hasVariant(
                $state,
                "color",
                "secondary"
              ),
              [sty.dropdownIconcolor_successHigh]: hasVariant(
                $state,
                "color",
                "successHigh"
              ),
              [sty.dropdownIconcolor_successLow]: hasVariant(
                $state,
                "color",
                "successLow"
              ),
              [sty.dropdownIconcolor_success]: hasVariant(
                $state,
                "color",
                "success"
              ),
              [sty.dropdownIconcolor_warningHigh]: hasVariant(
                $state,
                "color",
                "warningHigh"
              ),
              [sty.dropdownIconcolor_warningLow]: hasVariant(
                $state,
                "color",
                "warningLow"
              ),
              [sty.dropdownIconcolor_warning]: hasVariant(
                $state,
                "color",
                "warning"
              ),
              [sty.dropdownIconisDisabled]: hasVariant(
                $state,
                "isDisabled",
                "isDisabled"
              ),
              [sty.dropdownIconisOpen]: hasVariant($state, "isOpen", "isOpen")
            })}
            role={"img"}
          />
        </button>
        {(hasVariant($state, "isOpen", "isOpen") ? true : false) ? (
          <Select__Overlay
            data-plasmic-name={"overlay"}
            data-plasmic-override={overrides.overlay}
            className={classNames("__wab_instance", sty.overlay, {
              [sty.overlayisOpen]: hasVariant($state, "isOpen", "isOpen")
            })}
            relativePlacement={"bottom"}
          >
            <div
              data-plasmic-name={"optionsContainer"}
              data-plasmic-override={overrides.optionsContainer}
              className={classNames(projectcss.all, sty.optionsContainer, {
                [sty.optionsContainerisOpen]: hasVariant(
                  $state,
                  "isOpen",
                  "isOpen"
                )
              })}
            >
              {p.renderPlasmicSlot({
                defaultContents: null,
                value: args.children
              })}
            </div>
          </Select__Overlay>
        ) : null}
      </div>
    </PlasmicSelectContext.Provider>
  ) as React.ReactElement | null;
}

function useBehavior<P extends pp.BaseSelectProps>(
  props: P,
  ref: pp.SelectRef
) {
  if (!("options" in props)) {
  }
  return pp.useSelect(
    PlasmicSelect,
    props,
    {
      ...{
        isOpenVariant: { group: "isOpen", variant: "isOpen" },
        placeholderVariant: {
          group: "showPlaceholder",
          variant: "showPlaceholder"
        },
        isDisabledVariant: { group: "isDisabled", variant: "isDisabled" },
        triggerContentSlot: "selectedContent",
        optionsSlot: "children",
        placeholderSlot: "placeholder",
        root: "root",
        trigger: "trigger",
        overlay: "overlay",
        optionsContainer: "optionsContainer"
      },
      OptionComponent: Select__Option,
      OptionGroupComponent: Select__OptionGroup
    },
    ref
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "trigger",
    "contentContainer",
    "dropdownIcon",
    "overlay",
    "optionsContainer"
  ],
  trigger: ["trigger", "contentContainer", "dropdownIcon"],
  contentContainer: ["contentContainer"],
  dropdownIcon: ["dropdownIcon"],
  overlay: ["overlay", "optionsContainer"],
  optionsContainer: ["optionsContainer"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  trigger: "button";
  contentContainer: "div";
  dropdownIcon: "svg";
  overlay: typeof Select__Overlay;
  optionsContainer: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSelect__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSelect__VariantsArgs;
    args?: PlasmicSelect__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSelect__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicSelect__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSelect__ArgProps,
          internalVariantPropNames: PlasmicSelect__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSelect__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSelect";
  } else {
    func.displayName = `PlasmicSelect.${nodeName}`;
  }
  return func;
}

export const PlasmicSelect = Object.assign(
  // Top-level PlasmicSelect renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    trigger: makeNodeComponent("trigger"),
    contentContainer: makeNodeComponent("contentContainer"),
    dropdownIcon: makeNodeComponent("dropdownIcon"),
    overlay: makeNodeComponent("overlay"),
    optionsContainer: makeNodeComponent("optionsContainer"),

    // Metadata about props expected for PlasmicSelect
    internalVariantProps: PlasmicSelect__VariantProps,
    internalArgProps: PlasmicSelect__ArgProps,

    // Context for sub components
    Context: PlasmicSelectContext,

    useBehavior
  }
);

export default PlasmicSelect;
/* prettier-ignore-end */
